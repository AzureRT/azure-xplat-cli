/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

function beautify(jsonText) {
    var obj = JSON.parse(jsonText);
    return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {

/*
  VirtualMachineScaleSet CreateOrUpdate
  --resource-group-name
  --parameters
=============================================
{
  "provisioningState":"",
  "sku":{
    "capacity":null,
    "name":"",
    "tier":""
  },
  "upgradePolicy":{
    "mode":""
  },
  "virtualMachineProfile":{
    "extensionProfile":{
      "extensions":[
        {
          "autoUpgradeMinorVersion":false,
          "extensionType":"",
          "protectedSettings":"",
          "provisioningState":"",
          "publisher":"",
          "settings":"",
          "typeHandlerVersion":"",
          "id":"",
          "name":"",
          "type":"",
          "location":"",
          "tags":{
          }
        }
      ]
    },
    "networkProfile":{
      "networkInterfaceConfigurations":[
        {
          "iPConfigurations":[
            {
              "loadBalancerBackendAddressPools":[
                {
                  "referenceUri":""
                }
              ],
              "loadBalancerInboundNatPools":[
                {
                  "referenceUri":""
                }
              ],
              "name":"",
              "subnet":{
                "referenceUri":""
              }
            }
          ],
          "name":"",
          "primary":null
        }
      ]
    },
    "oSProfile":{
      "computerNamePrefix":"",
      "adminPassword":"",
      "adminUsername":"",
      "customData":"",
      "linuxConfiguration":{
        "disablePasswordAuthentication":null,
        "sshConfiguration":{
          "publicKeys":[
            {
              "keyData":"",
              "path":""
            }
          ]
        }
      },
      "secrets":[
        {
          "sourceVault":{
            "referenceUri":""
          },
          "vaultCertificates":[
            {
              "certificateStore":"",
              "certificateUrl":""
            }
          ]
        }
      ],
      "windowsConfiguration":{
        "additionalUnattendContents":[
          {
            "componentName":"",
            "content":"",
            "passName":"",
            "settingName":""
          }
        ],
        "enableAutomaticUpdates":null,
        "provisionVMAgent":null,
        "timeZone":"",
        "winRMConfiguration":{
          "listeners":[
            {
              "certificateUrl":"",
              "protocol":""
            }
          ]
        }
      }
    },
    "storageProfile":{
      "imageReference":{
        "offer":"",
        "publisher":"",
        "sku":"",
        "version":""
      },
      "oSDisk":{
        "caching":"",
        "createOption":"",
        "name":"",
        "operatingSystemType":"",
        "sourceImage":{
          "uri":""
        },
        "virtualHardDiskContainers":[
          ""
        ]
      }
    }
  },
  "id":"",
  "name":"",
  "type":"",
  "location":"",
  "tags":{
  }
}
*/
  var virtualMachineScaleSetCreateOrUpdate = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetCreateOrUpdate.command('create-or-update')
  .description($('create-or-update method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('parameters = ' + options.parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(options.parameters);
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.createOrUpdate(options.resourceGroupName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineScaleSetCreateOrUpdatecreateOrUpdateParameters1 = virtualMachineScaleSetCreateOrUpdate.category('parameters')
  .description($('Commands to manage parameter for your virtual machine scale set.'));
  var virtualMachineScaleSetCreateOrUpdatecreateOrUpdateGenerate1 = virtualMachineScaleSetCreateOrUpdatecreateOrUpdateParameters1.category('generate')
  .description($('Commands to generate parameter file for your virtual machine scale set.'));
  virtualMachineScaleSetCreateOrUpdatecreateOrUpdateGenerate1.command('create-or-update')
  .description($('Generate virtualMachineScaleSetCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"provisioningState\":\"\",\"sku\":{\"capacity\":null,\"name\":\"\",\"tier\":\"\"},\"upgradePolicy\":{\"mode\":\"\"},\"virtualMachineProfile\":{\"extensionProfile\":{\"extensions\":[{\"autoUpgradeMinorVersion\":false,\"extensionType\":\"\",\"protectedSettings\":\"\",\"provisioningState\":\"\",\"publisher\":\"\",\"settings\":\"\",\"typeHandlerVersion\":\"\",\"id\":\"\",\"name\":\"\",\"type\":\"\",\"location\":\"\",\"tags\":{}}]},\"networkProfile\":{\"networkInterfaceConfigurations\":[{\"iPConfigurations\":[{\"loadBalancerBackendAddressPools\":[{\"referenceUri\":\"\"}],\"loadBalancerInboundNatPools\":[{\"referenceUri\":\"\"}],\"name\":\"\",\"subnet\":{\"referenceUri\":\"\"}}],\"name\":\"\",\"primary\":null}]},\"oSProfile\":{\"computerNamePrefix\":\"\",\"adminPassword\":\"\",\"adminUsername\":\"\",\"customData\":\"\",\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"sshConfiguration\":{\"publicKeys\":[{\"keyData\":\"\",\"path\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"referenceUri\":\"\"},\"vaultCertificates\":[{\"certificateStore\":\"\",\"certificateUrl\":\"\"}]}],\"windowsConfiguration\":{\"additionalUnattendContents\":[{\"componentName\":\"\",\"content\":\"\",\"passName\":\"\",\"settingName\":\"\"}],\"enableAutomaticUpdates\":null,\"provisionVMAgent\":null,\"timeZone\":\"\",\"winRMConfiguration\":{\"listeners\":[{\"certificateUrl\":\"\",\"protocol\":\"\"}]}}},\"storageProfile\":{\"imageReference\":{\"offer\":\"\",\"publisher\":\"\",\"sku\":\"\",\"version\":\"\"},\"oSDisk\":{\"caching\":\"\",\"createOption\":\"\",\"name\":\"\",\"operatingSystemType\":\"\",\"sourceImage\":{\"uri\":\"\"},\"virtualHardDiskContainers\":[\"\"]}}},\"id\":\"\",\"name\":\"\",\"type\":\"\",\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'virtualMachineScaleSetCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"provisioningState\":\"\",\r\n\"sku\":{\r\n\"capacity\":null,\r\n\"name\":\"\",\r\n\"tier\":\"\"\r\n},\r\n\"upgradePolicy\":{\r\n\"mode\":\"\"\r\n},\r\n\"virtualMachineProfile\":{\r\n\"extensionProfile\":{\r\n\"extensions\":[\r\n{\r\n\"autoUpgradeMinorVersion\":false,\r\n\"extensionType\":\"\",\r\n\"protectedSettings\":\"\",\r\n\"provisioningState\":\"\",\r\n\"publisher\":\"\",\r\n\"settings\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"id\":\"\",\r\n\"name\":\"\",\r\n\"type\":\"\",\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}\r\n]\r\n},\r\n\"networkProfile\":{\r\n\"networkInterfaceConfigurations\":[\r\n{\r\n\"iPConfigurations\":[\r\n{\r\n\"loadBalancerBackendAddressPools\":[\r\n{\r\n\"referenceUri\":\"\"\r\n}\r\n],\r\n\"loadBalancerInboundNatPools\":[\r\n{\r\n\"referenceUri\":\"\"\r\n}\r\n],\r\n\"name\":\"\",\r\n\"subnet\":{\r\n\"referenceUri\":\"\"\r\n}\r\n}\r\n],\r\n\"name\":\"\",\r\n\"primary\":null\r\n}\r\n]\r\n},\r\n\"oSProfile\":{\r\n\"computerNamePrefix\":\"\",\r\n\"adminPassword\":\"\",\r\n\"adminUsername\":\"\",\r\n\"customData\":\"\",\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"sshConfiguration\":{\r\n\"publicKeys\":[\r\n{\r\n\"keyData\":\"\",\r\n\"path\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"referenceUri\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateStore\":\"\",\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n],\r\n\"windowsConfiguration\":{\r\n\"additionalUnattendContents\":[\r\n{\r\n\"componentName\":\"\",\r\n\"content\":\"\",\r\n\"passName\":\"\",\r\n\"settingName\":\"\"\r\n}\r\n],\r\n\"enableAutomaticUpdates\":null,\r\n\"provisionVMAgent\":null,\r\n\"timeZone\":\"\",\r\n\"winRMConfiguration\":{\r\n\"listeners\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"protocol\":\"\"\r\n}\r\n]\r\n}\r\n}\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"offer\":\"\",\r\n\"publisher\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"oSDisk\":{\r\n\"caching\":\"\",\r\n\"createOption\":\"\",\r\n\"name\":\"\",\r\n\"operatingSystemType\":\"\",\r\n\"sourceImage\":{\r\n\"uri\":\"\"\r\n},\r\n\"virtualHardDiskContainers\":[\r\n\"\"\r\n]\r\n}\r\n}\r\n},\r\n\"id\":\"\",\r\n\"name\":\"\",\r\n\"type\":\"\",\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineScaleSetCreateOrUpdatecreateOrUpdateParameters1.command('patch')
  .description($('Command to patch virtualMachineScaleSetCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0.command('virtual-machine-scale-set')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--upgrade-policy <upgradePolicy>', $('Set the upgrade-policy value.'))
  .option('--virtual-machine-profile <virtualMachineProfile>', $('Set the virtual-machine-profile value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'provisioningState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'upgradePolicy';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradePolicy) {
      if (options.parse && options.upgradePolicy) {
        options.upgradePolicy = JSON.parse(options.upgradePolicy);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradePolicy}]);
    }
    paramPath = options.path + '/' + 'virtualMachineProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualMachineProfile) {
      if (options.parse && options.virtualMachineProfile) {
        options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineProfile}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1.command('virtual-machine-scale-set')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--upgrade-policy', $('Remove the upgrade-policy value.'))
  .option('--virtual-machine-profile', $('Remove the virtual-machine-profile value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.provisioningState || options.sku || options.upgradePolicy || options.virtualMachineProfile || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.upgradePolicy) {
        subItemPath = options.path + '/upgradePolicy';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachineProfile) {
        subItemPath = options.path + '/virtualMachineProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2.command('virtual-machine-scale-set')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineScaleSet2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--upgrade-policy <upgradePolicy>', $('Add the upgrade-policy value.'))
  .option('--virtual-machine-profile <virtualMachineProfile>', $('Add the virtual-machine-profile value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'provisioningState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '' + '/' + 'upgradePolicy';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.upgradePolicy) {
      if (options.parse && options.upgradePolicy) {
        options.upgradePolicy = JSON.parse(options.upgradePolicy);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradePolicy}]);
    }
    paramPath = '' + '/' + 'virtualMachineProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualMachineProfile) {
      if (options.parse && options.virtualMachineProfile) {
        options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineProfile}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetSku0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSku0 = catparametersCreateOrUpdateVirtualMachineScaleSetSku0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetSku0 = parametersCreateOrUpdateVirtualMachineScaleSetSku0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetSku0.command('sku')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetSku0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sku';
    var paramPath = options.path + '/' + 'capacity';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetSku1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSku1 = catparametersCreateOrUpdateVirtualMachineScaleSetSku1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetSku1 = parametersCreateOrUpdateVirtualMachineScaleSetSku1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetSku1.command('sku')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSku1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--capacity', $('Remove the capacity value.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sku';
    var anySubItem = false || options.capacity || options.name || options.tier;
    if (anySubItem) {
      var subItemPath = null;
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetSku2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSku2 = catparametersCreateOrUpdateVirtualMachineScaleSetSku2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetSku2 = parametersCreateOrUpdateVirtualMachineScaleSetSku2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetSku2.command('sku')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSku2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--capacity <capacity>', $('Add the capacity value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--tier <tier>', $('Add the tier value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/sku' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/sku' + '/' + 'capacity';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    paramPath = '/sku' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/sku' + '/' + 'tier';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0 = catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0 = parametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0.command('upgrade-policy')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/upgradePolicy';
    var paramPath = options.path + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1 = catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1 = parametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1.command('upgrade-policy')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/upgradePolicy';
    var anySubItem = false || options.mode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2 = catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2 = parametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2.command('upgrade-policy')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetUpgradePolicy2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/upgradePolicy' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/upgradePolicy' + '/' + 'mode';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0.command('virtual-machine-profile')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extension-profile <extensionProfile>', $('Set the extension-profile value.'))
  .option('--network-profile <networkProfile>', $('Set the network-profile value.'))
  .option('--os-profile <oSProfile>', $('Set the os-profile value.'))
  .option('--storage-profile <storageProfile>', $('Set the storage-profile value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile';
    var paramPath = options.path + '/' + 'extensionProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionProfile) {
      if (options.parse && options.extensionProfile) {
        options.extensionProfile = JSON.parse(options.extensionProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionProfile}]);
    }
    paramPath = options.path + '/' + 'networkProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkProfile) {
      if (options.parse && options.networkProfile) {
        options.networkProfile = JSON.parse(options.networkProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkProfile}]);
    }
    paramPath = options.path + '/' + 'oSProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSProfile) {
      if (options.parse && options.oSProfile) {
        options.oSProfile = JSON.parse(options.oSProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSProfile}]);
    }
    paramPath = options.path + '/' + 'storageProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storageProfile) {
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1.command('virtual-machine-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--extension-profile', $('Remove the extension-profile value.'))
  .option('--network-profile', $('Remove the network-profile value.'))
  .option('--os-profile', $('Remove the os-profile value.'))
  .option('--storage-profile', $('Remove the storage-profile value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile';
    var anySubItem = false || options.extensionProfile || options.networkProfile || options.oSProfile || options.storageProfile;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensionProfile) {
        subItemPath = options.path + '/extensionProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkProfile) {
        subItemPath = options.path + '/networkProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSProfile) {
        subItemPath = options.path + '/oSProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageProfile) {
        subItemPath = options.path + '/storageProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2.command('virtual-machine-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVirtualMachineProfile2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extension-profile <extensionProfile>', $('Add the extension-profile value.'))
  .option('--network-profile <networkProfile>', $('Add the network-profile value.'))
  .option('--os-profile <oSProfile>', $('Add the os-profile value.'))
  .option('--storage-profile <storageProfile>', $('Add the storage-profile value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile' + '/' + 'extensionProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionProfile) {
      if (options.parse && options.extensionProfile) {
        options.extensionProfile = JSON.parse(options.extensionProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionProfile}]);
    }
    paramPath = '/virtualMachineProfile' + '/' + 'networkProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkProfile) {
      if (options.parse && options.networkProfile) {
        options.networkProfile = JSON.parse(options.networkProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkProfile}]);
    }
    paramPath = '/virtualMachineProfile' + '/' + 'oSProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSProfile) {
      if (options.parse && options.oSProfile) {
        options.oSProfile = JSON.parse(options.oSProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSProfile}]);
    }
    paramPath = '/virtualMachineProfile' + '/' + 'storageProfile';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.storageProfile) {
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0.command('extension-profile')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/extensionProfile';
    var paramPath = options.path + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1.command('extension-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--extensions', $('Remove the extensions value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/extensionProfile';
    var anySubItem = false || options.extensions;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2.command('extension-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetExtensionProfile2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/extensionProfile' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/extensionProfile' + '/' + 'extensions';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetExtensions0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetExtensions0 = catparametersCreateOrUpdateVirtualMachineScaleSetExtensions0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetExtensions0 = parametersCreateOrUpdateVirtualMachineScaleSetExtensions0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetExtensions0.command('extensions')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetExtensions0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--auto-upgrade-minor-version <autoUpgradeMinorVersion>', $('Set the auto-upgrade-minor-version value.'))
  .option('--extension-type <extensionType>', $('Set the extension-type value.'))
  .option('--protected-settings <protectedSettings>', $('Set the protected-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--settings <settings>', $('Set the settings value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'autoUpgradeMinorVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.autoUpgradeMinorVersion) {
      if (options.parse && options.autoUpgradeMinorVersion) {
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion}]);
    }
    paramPath = options.path + '/' + 'extensionType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionType) {
      if (options.parse && options.extensionType) {
        options.extensionType = JSON.parse(options.extensionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionType}]);
    }
    paramPath = options.path + '/' + 'protectedSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protectedSettings) {
      if (options.parse && options.protectedSettings) {
        options.protectedSettings = JSON.parse(options.protectedSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protectedSettings}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'settings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.settings) {
      if (options.parse && options.settings) {
        options.settings = JSON.parse(options.settings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settings}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.typeHandlerVersion) {
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetExtensions1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetExtensions1 = catparametersCreateOrUpdateVirtualMachineScaleSetExtensions1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetExtensions1 = parametersCreateOrUpdateVirtualMachineScaleSetExtensions1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetExtensions1.command('extensions')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetExtensions1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--auto-upgrade-minor-version', $('Remove the auto-upgrade-minor-version value.'))
  .option('--extension-type', $('Remove the extension-type value.'))
  .option('--protected-settings', $('Remove the protected-settings value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--settings', $('Remove the settings value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.autoUpgradeMinorVersion || options.extensionType || options.protectedSettings || options.provisioningState || options.publisher || options.settings || options.typeHandlerVersion || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.autoUpgradeMinorVersion) {
        subItemPath = options.path + '/autoUpgradeMinorVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionType) {
        subItemPath = options.path + '/extensionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protectedSettings) {
        subItemPath = options.path + '/protectedSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settings) {
        subItemPath = options.path + '/settings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetExtensions2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetExtensions2 = catparametersCreateOrUpdateVirtualMachineScaleSetExtensions2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetExtensions2 = parametersCreateOrUpdateVirtualMachineScaleSetExtensions2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetExtensions2.command('extensions')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetExtensions2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--auto-upgrade-minor-version <autoUpgradeMinorVersion>', $('Add the auto-upgrade-minor-version value.'))
  .option('--extension-type <extensionType>', $('Add the extension-type value.'))
  .option('--protected-settings <protectedSettings>', $('Add the protected-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--settings <settings>', $('Add the settings value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Add the type-handler-version value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'autoUpgradeMinorVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.autoUpgradeMinorVersion) {
      if (options.parse && options.autoUpgradeMinorVersion) {
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'extensionType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.extensionType) {
      if (options.parse && options.extensionType) {
        options.extensionType = JSON.parse(options.extensionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionType}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'protectedSettings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protectedSettings) {
      if (options.parse && options.protectedSettings) {
        options.protectedSettings = JSON.parse(options.protectedSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protectedSettings}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'settings';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.settings) {
      if (options.parse && options.settings) {
        options.settings = JSON.parse(options.settings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settings}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'typeHandlerVersion';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.typeHandlerVersion) {
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'location';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'tags';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0.command('network-profile')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--network-interface-configurations <networkInterfaceConfigurations>', $('Set the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile';
    var paramPath = options.path + '/' + 'networkInterfaceConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaceConfigurations) {
      if (options.parse && options.networkInterfaceConfigurations) {
        options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1.command('network-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interface-configurations', $('Remove the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile';
    var anySubItem = false || options.networkInterfaceConfigurations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.networkInterfaceConfigurations) {
        subItemPath = options.path + '/networkInterfaceConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2.command('network-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetNetworkProfile2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--network-interface-configurations <networkInterfaceConfigurations>', $('Add the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile' + '/' + 'networkInterfaceConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.networkInterfaceConfigurations) {
      if (options.parse && options.networkInterfaceConfigurations) {
        options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0 = catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0 = parametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0.command('network-interface-configurations')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--primary <primary>', $('Set the primary value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'primary';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1 = catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1 = parametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1.command('network-interface-configurations')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--name', $('Remove the name value.'))
  .option('--primary', $('Remove the primary value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.ipConfigurations || options.name || options.primary;
    if (anySubItem) {
      var subItemPath = null;
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.primary) {
        subItemPath = options.path + '/primary';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2 = catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2 = parametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2.command('network-interface-configurations')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetNetworkInterfaceConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--primary <primary>', $('Add the primary value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'primary';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0 = catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0 = parametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0.command('ip-configurations')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Set the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-pools <loadBalancerInboundNatPools>', $('Set the load-balancer-inbound-nat-pools value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'loadBalancerBackendAddressPools';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = options.path + '/' + 'loadBalancerInboundNatPools';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerInboundNatPools) {
      if (options.parse && options.loadBalancerInboundNatPools) {
        options.loadBalancerInboundNatPools = JSON.parse(options.loadBalancerInboundNatPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatPools}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1 = catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1 = parametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1.command('ip-configurations')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--load-balancer-backend-address-pools', $('Remove the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-pools', $('Remove the load-balancer-inbound-nat-pools value.'))
  .option('--name', $('Remove the name value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.loadBalancerBackendAddressPools || options.loadBalancerInboundNatPools || options.name || options.subnet;
    if (anySubItem) {
      var subItemPath = null;
      if (options.loadBalancerBackendAddressPools) {
        subItemPath = options.path + '/loadBalancerBackendAddressPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerInboundNatPools) {
        subItemPath = options.path + '/loadBalancerInboundNatPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2 = catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2 = parametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2.command('ip-configurations')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetIPConfigurations2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Add the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-pools <loadBalancerInboundNatPools>', $('Add the load-balancer-inbound-nat-pools value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerBackendAddressPools';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerInboundNatPools';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.loadBalancerInboundNatPools) {
      if (options.parse && options.loadBalancerInboundNatPools) {
        options.loadBalancerInboundNatPools = JSON.parse(options.loadBalancerInboundNatPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatPools}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0 = catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0 = parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0.command('load-balancer-backend-address-pools')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--reference-uri <referenceUri>', $('Set the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1 = catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1 = parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1.command('load-balancer-backend-address-pools')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--reference-uri', $('Remove the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.referenceUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.referenceUri) {
        subItemPath = options.path + '/referenceUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2 = catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2 = parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2.command('load-balancer-backend-address-pools')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerBackendAddressPools2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--reference-uri <referenceUri>', $('Add the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set load-balancer-inbound-nat-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0 = catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0 = parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0.command('load-balancer-inbound-nat-pools')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--reference-uri <referenceUri>', $('Set the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove load-balancer-inbound-nat-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1 = catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1 = parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1.command('load-balancer-inbound-nat-pools')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--reference-uri', $('Remove the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.referenceUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.referenceUri) {
        subItemPath = options.path + '/referenceUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add load-balancer-inbound-nat-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2 = catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2 = parametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2.command('load-balancer-inbound-nat-pools')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetLoadBalancerInboundNatPools2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--reference-uri <referenceUri>', $('Add the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatPools' + (options.index ? ('/' + options.index) : '') + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetSubnet0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSubnet0 = catparametersCreateOrUpdateVirtualMachineScaleSetSubnet0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetSubnet0 = parametersCreateOrUpdateVirtualMachineScaleSetSubnet0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetSubnet0.command('subnet')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetSubnet0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--reference-uri <referenceUri>', $('Set the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetSubnet1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSubnet1 = catparametersCreateOrUpdateVirtualMachineScaleSetSubnet1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetSubnet1 = parametersCreateOrUpdateVirtualMachineScaleSetSubnet1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetSubnet1.command('subnet')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSubnet1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--reference-uri', $('Remove the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.referenceUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.referenceUri) {
        subItemPath = options.path + '/referenceUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetSubnet2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSubnet2 = catparametersCreateOrUpdateVirtualMachineScaleSetSubnet2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetSubnet2 = parametersCreateOrUpdateVirtualMachineScaleSetSubnet2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetSubnet2.command('subnet')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSubnet2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--reference-uri <referenceUri>', $('Add the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/iPConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetOSProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetOSProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetOSProfile0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetOSProfile0.command('os-profile')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--computer-name-prefix <computerNamePrefix>', $('Set the computer-name-prefix value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--admin-username <adminUsername>', $('Set the admin-username value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--linux-configuration <linuxConfiguration>', $('Set the linux-configuration value.'))
  .option('--secrets <secrets>', $('Set the secrets value.'))
  .option('--windows-configuration <windowsConfiguration>', $('Set the windows-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile';
    var paramPath = options.path + '/' + 'computerNamePrefix';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerNamePrefix) {
      if (options.parse && options.computerNamePrefix) {
        options.computerNamePrefix = JSON.parse(options.computerNamePrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerNamePrefix}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'adminUsername';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUsername) {
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'linuxConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.linuxConfiguration) {
      if (options.parse && options.linuxConfiguration) {
        options.linuxConfiguration = JSON.parse(options.linuxConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxConfiguration}]);
    }
    paramPath = options.path + '/' + 'secrets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.secrets) {
      if (options.parse && options.secrets) {
        options.secrets = JSON.parse(options.secrets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secrets}]);
    }
    paramPath = options.path + '/' + 'windowsConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsConfiguration) {
      if (options.parse && options.windowsConfiguration) {
        options.windowsConfiguration = JSON.parse(options.windowsConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetOSProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetOSProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetOSProfile1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetOSProfile1.command('os-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--computer-name-prefix', $('Remove the computer-name-prefix value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--admin-username', $('Remove the admin-username value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--linux-configuration', $('Remove the linux-configuration value.'))
  .option('--secrets', $('Remove the secrets value.'))
  .option('--windows-configuration', $('Remove the windows-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile';
    var anySubItem = false || options.computerNamePrefix || options.adminPassword || options.adminUsername || options.customData || options.linuxConfiguration || options.secrets || options.windowsConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computerNamePrefix) {
        subItemPath = options.path + '/computerNamePrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUsername) {
        subItemPath = options.path + '/adminUsername';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.linuxConfiguration) {
        subItemPath = options.path + '/linuxConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secrets) {
        subItemPath = options.path + '/secrets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsConfiguration) {
        subItemPath = options.path + '/windowsConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetOSProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetOSProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetOSProfile2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetOSProfile2.command('os-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetOSProfile2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--computer-name-prefix <computerNamePrefix>', $('Add the computer-name-prefix value.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--admin-username <adminUsername>', $('Add the admin-username value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--linux-configuration <linuxConfiguration>', $('Add the linux-configuration value.'))
  .option('--secrets <secrets>', $('Add the secrets value.'))
  .option('--windows-configuration <windowsConfiguration>', $('Add the windows-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'computerNamePrefix';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.computerNamePrefix) {
      if (options.parse && options.computerNamePrefix) {
        options.computerNamePrefix = JSON.parse(options.computerNamePrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerNamePrefix}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'adminPassword';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'adminUsername';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.adminUsername) {
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'customData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'linuxConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.linuxConfiguration) {
      if (options.parse && options.linuxConfiguration) {
        options.linuxConfiguration = JSON.parse(options.linuxConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxConfiguration}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'secrets';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.secrets) {
      if (options.parse && options.secrets) {
        options.secrets = JSON.parse(options.secrets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secrets}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile' + '/' + 'windowsConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.windowsConfiguration) {
      if (options.parse && options.windowsConfiguration) {
        options.windowsConfiguration = JSON.parse(options.windowsConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0 = catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0 = parametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0.command('linux-configuration')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--disable-password-authentication <disablePasswordAuthentication>', $('Set the disable-password-authentication value.'))
  .option('--ssh-configuration <sshConfiguration>', $('Set the ssh-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration';
    var paramPath = options.path + '/' + 'disablePasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disablePasswordAuthentication) {
      if (options.parse && options.disablePasswordAuthentication) {
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disablePasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'sshConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshConfiguration) {
      if (options.parse && options.sshConfiguration) {
        options.sshConfiguration = JSON.parse(options.sshConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1 = catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1 = parametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1.command('linux-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--disable-password-authentication', $('Remove the disable-password-authentication value.'))
  .option('--ssh-configuration', $('Remove the ssh-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration';
    var anySubItem = false || options.disablePasswordAuthentication || options.sshConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.disablePasswordAuthentication) {
        subItemPath = options.path + '/disablePasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sshConfiguration) {
        subItemPath = options.path + '/sshConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2 = catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2 = parametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2.command('linux-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetLinuxConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--disable-password-authentication <disablePasswordAuthentication>', $('Add the disable-password-authentication value.'))
  .option('--ssh-configuration <sshConfiguration>', $('Add the ssh-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/linuxConfiguration' + '/' + 'disablePasswordAuthentication';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.disablePasswordAuthentication) {
      if (options.parse && options.disablePasswordAuthentication) {
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disablePasswordAuthentication}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/linuxConfiguration' + '/' + 'sshConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sshConfiguration) {
      if (options.parse && options.sshConfiguration) {
        options.sshConfiguration = JSON.parse(options.sshConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sshConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set ssh-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0 = catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0 = parametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0.command('ssh-configuration')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration';
    var paramPath = options.path + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove ssh-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1 = catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1 = parametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1.command('ssh-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration';
    var anySubItem = false || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add ssh-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2 = catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2 = parametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2.command('ssh-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSshConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration' + '/' + 'publicKeys';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0 = catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0 = parametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0.command('public-keys')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--key-data <keyData>', $('Set the key-data value.'))
  .option('--path <path>', $('Set the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'keyData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyData) {
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    paramPath = options.path + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1 = catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1 = parametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1.command('public-keys')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--key-data', $('Remove the key-data value.'))
  .option('--path', $('Remove the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.keyData || options.path;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyData) {
        subItemPath = options.path + '/keyData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2 = catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2 = parametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2.command('public-keys')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetPublicKeys2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--key-data <keyData>', $('Add the key-data value.'))
  .option('--path <path>', $('Add the path value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'keyData';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.keyData) {
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/linuxConfiguration/sshConfiguration/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetSecrets0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSecrets0 = catparametersCreateOrUpdateVirtualMachineScaleSetSecrets0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetSecrets0 = parametersCreateOrUpdateVirtualMachineScaleSetSecrets0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetSecrets0.command('secrets')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetSecrets0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--vault-certificates <vaultCertificates>', $('Set the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/secrets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceVault) {
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'vaultCertificates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vaultCertificates) {
      if (options.parse && options.vaultCertificates) {
        options.vaultCertificates = JSON.parse(options.vaultCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vaultCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetSecrets1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSecrets1 = catparametersCreateOrUpdateVirtualMachineScaleSetSecrets1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetSecrets1 = parametersCreateOrUpdateVirtualMachineScaleSetSecrets1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetSecrets1.command('secrets')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSecrets1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--vault-certificates', $('Remove the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/secrets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.sourceVault || options.vaultCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vaultCertificates) {
        subItemPath = options.path + '/vaultCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetSecrets2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSecrets2 = catparametersCreateOrUpdateVirtualMachineScaleSetSecrets2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetSecrets2 = parametersCreateOrUpdateVirtualMachineScaleSetSecrets2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetSecrets2.command('secrets')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSecrets2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--source-vault <sourceVault>', $('Add the source-vault value.'))
  .option('--vault-certificates <vaultCertificates>', $('Add the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/secrets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/secrets' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceVault';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceVault) {
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/secrets' + (options.index ? ('/' + options.index) : '') + '/' + 'vaultCertificates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.vaultCertificates) {
      if (options.parse && options.vaultCertificates) {
        options.vaultCertificates = JSON.parse(options.vaultCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vaultCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSourceVault0 = catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetSourceVault0 = parametersCreateOrUpdateVirtualMachineScaleSetSourceVault0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetSourceVault0.command('source-vault')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--reference-uri <referenceUri>', $('Set the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var paramPath = options.path + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSourceVault1 = catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetSourceVault1 = parametersCreateOrUpdateVirtualMachineScaleSetSourceVault1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetSourceVault1.command('source-vault')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--reference-uri', $('Remove the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var anySubItem = false || options.referenceUri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.referenceUri) {
        subItemPath = options.path + '/referenceUri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSourceVault2 = catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetSourceVault2 = parametersCreateOrUpdateVirtualMachineScaleSetSourceVault2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetSourceVault2.command('source-vault')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSourceVault2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--reference-uri <referenceUri>', $('Add the reference-uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/sourceVault' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/sourceVault' + '/' + 'referenceUri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.referenceUri) {
      if (options.parse && options.referenceUri) {
        options.referenceUri = JSON.parse(options.referenceUri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.referenceUri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0 = catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0 = parametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0.command('vault-certificates')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--certificate-store <certificateStore>', $('Set the certificate-store value.'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateStore';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateStore) {
      if (options.parse && options.certificateStore) {
        options.certificateStore = JSON.parse(options.certificateStore);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateStore}]);
    }
    paramPath = options.path + '/' + 'certificateUrl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1 = catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1 = parametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1.command('vault-certificates')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--certificate-store', $('Remove the certificate-store value.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateStore || options.certificateUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateStore) {
        subItemPath = options.path + '/certificateStore';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2 = catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2 = parametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2.command('vault-certificates')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVaultCertificates2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-store <certificateStore>', $('Add the certificate-store value.'))
  .option('--certificate-url <certificateUrl>', $('Add the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateStore';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateStore) {
      if (options.parse && options.certificateStore) {
        options.certificateStore = JSON.parse(options.certificateStore);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateStore}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateUrl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0 = catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0 = parametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0.command('windows-configuration')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--additional-unattend-contents <additionalUnattendContents>', $('Set the additional-unattend-contents value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--provision-vm-agent <provisionVMAgent>', $('Set the provision-vm-agent value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--win-rm-configuration <winRMConfiguration>', $('Set the win-rm-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration';
    var paramPath = options.path + '/' + 'additionalUnattendContents';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.additionalUnattendContents) {
      if (options.parse && options.additionalUnattendContents) {
        options.additionalUnattendContents = JSON.parse(options.additionalUnattendContents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContents}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'provisionVMAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionVMAgent) {
      if (options.parse && options.provisionVMAgent) {
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionVMAgent}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'winRMConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.winRMConfiguration) {
      if (options.parse && options.winRMConfiguration) {
        options.winRMConfiguration = JSON.parse(options.winRMConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.winRMConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1 = catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1 = parametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1.command('windows-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--additional-unattend-contents', $('Remove the additional-unattend-contents value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--provision-vm-agent', $('Remove the provision-vm-agent value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--win-rm-configuration', $('Remove the win-rm-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration';
    var anySubItem = false || options.additionalUnattendContents || options.enableAutomaticUpdates || options.provisionVMAgent || options.timeZone || options.winRMConfiguration;
    if (anySubItem) {
      var subItemPath = null;
      if (options.additionalUnattendContents) {
        subItemPath = options.path + '/additionalUnattendContents';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisionVMAgent) {
        subItemPath = options.path + '/provisionVMAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.winRMConfiguration) {
        subItemPath = options.path + '/winRMConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2 = catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2 = parametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2.command('windows-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetWindowsConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--additional-unattend-contents <additionalUnattendContents>', $('Add the additional-unattend-contents value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--provision-vm-agent <provisionVMAgent>', $('Add the provision-vm-agent value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--win-rm-configuration <winRMConfiguration>', $('Add the win-rm-configuration value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration' + '/' + 'additionalUnattendContents';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.additionalUnattendContents) {
      if (options.parse && options.additionalUnattendContents) {
        options.additionalUnattendContents = JSON.parse(options.additionalUnattendContents);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContents}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration' + '/' + 'enableAutomaticUpdates';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration' + '/' + 'provisionVMAgent';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.provisionVMAgent) {
      if (options.parse && options.provisionVMAgent) {
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionVMAgent}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration' + '/' + 'timeZone';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration' + '/' + 'winRMConfiguration';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.winRMConfiguration) {
      if (options.parse && options.winRMConfiguration) {
        options.winRMConfiguration = JSON.parse(options.winRMConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.winRMConfiguration}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set additional-unattend-contents
  var catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0 = catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0 = parametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0.command('additional-unattend-contents')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--content <content>', $('Set the content value.'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'componentName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'content';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = options.path + '/' + 'passName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'settingName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove additional-unattend-contents
  var catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1 = catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1 = parametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1.command('additional-unattend-contents')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--content', $('Remove the content value.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.componentName || options.content || options.passName || options.settingName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add additional-unattend-contents
  var catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2 = catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2 = parametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2.command('additional-unattend-contents')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetAdditionalUnattendContents2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--component-name <componentName>', $('Add the component-name value.'))
  .option('--content <content>', $('Add the content value.'))
  .option('--pass-name <passName>', $('Add the pass-name value.'))
  .option('--setting-name <settingName>', $('Add the setting-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '') + '/' + 'componentName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '') + '/' + 'content';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '') + '/' + 'passName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/additionalUnattendContents' + (options.index ? ('/' + options.index) : '') + '/' + 'settingName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set win-rm-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0 = catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0 = parametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0.command('win-rm-configuration')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove win-rm-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1 = catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1 = parametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1.command('win-rm-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add win-rm-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2 = catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2 = parametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2.command('win-rm-configuration')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetWinRMConfiguration2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration' + '/' + 'listeners';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetListeners0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetListeners0 = catparametersCreateOrUpdateVirtualMachineScaleSetListeners0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetListeners0 = parametersCreateOrUpdateVirtualMachineScaleSetListeners0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetListeners0.command('listeners')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetListeners0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateUrl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetListeners1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetListeners1 = catparametersCreateOrUpdateVirtualMachineScaleSetListeners1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetListeners1 = parametersCreateOrUpdateVirtualMachineScaleSetListeners1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetListeners1.command('listeners')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetListeners1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateUrl || options.protocol;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetListeners2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetListeners2 = catparametersCreateOrUpdateVirtualMachineScaleSetListeners2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetListeners2 = parametersCreateOrUpdateVirtualMachineScaleSetListeners2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetListeners2.command('listeners')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetListeners2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--certificate-url <certificateUrl>', $('Add the certificate-url value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateUrl';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    paramPath = '/virtualMachineProfile/oSProfile/windowsConfiguration/winRMConfiguration/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0.command('storage-profile')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--image-reference <imageReference>', $('Set the image-reference value.'))
  .option('--os-disk <oSDisk>', $('Set the os-disk value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile';
    var paramPath = options.path + '/' + 'imageReference';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageReference) {
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = options.path + '/' + 'oSDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDisk) {
      if (options.parse && options.oSDisk) {
        options.oSDisk = JSON.parse(options.oSDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1.command('storage-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--image-reference', $('Remove the image-reference value.'))
  .option('--os-disk', $('Remove the os-disk value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile';
    var anySubItem = false || options.imageReference || options.oSDisk;
    if (anySubItem) {
      var subItemPath = null;
      if (options.imageReference) {
        subItemPath = options.path + '/imageReference';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.oSDisk) {
        subItemPath = options.path + '/oSDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2.command('storage-profile')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetStorageProfile2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--image-reference <imageReference>', $('Add the image-reference value.'))
  .option('--os-disk <oSDisk>', $('Add the os-disk value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile' + '/' + 'imageReference';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.imageReference) {
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile' + '/' + 'oSDisk';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.oSDisk) {
      if (options.parse && options.oSDisk) {
        options.oSDisk = JSON.parse(options.oSDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.oSDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetImageReference0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetImageReference0 = catparametersCreateOrUpdateVirtualMachineScaleSetImageReference0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetImageReference0 = parametersCreateOrUpdateVirtualMachineScaleSetImageReference0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetImageReference0.command('image-reference')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetImageReference0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/imageReference';
    var paramPath = options.path + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetImageReference1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetImageReference1 = catparametersCreateOrUpdateVirtualMachineScaleSetImageReference1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetImageReference1 = parametersCreateOrUpdateVirtualMachineScaleSetImageReference1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetImageReference1.command('image-reference')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetImageReference1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/imageReference';
    var anySubItem = false || options.offer || options.publisher || options.sku || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetImageReference2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetImageReference2 = catparametersCreateOrUpdateVirtualMachineScaleSetImageReference2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetImageReference2 = parametersCreateOrUpdateVirtualMachineScaleSetImageReference2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetImageReference2.command('image-reference')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetImageReference2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/imageReference' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'offer';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'publisher';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'sku';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'version';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetOSDisk0 = catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetOSDisk0 = parametersCreateOrUpdateVirtualMachineScaleSetOSDisk0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetOSDisk0.command('os-disk')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Set the operating-system-type value.'))
  .option('--source-image <sourceImage>', $('Set the source-image value.'))
  .option('--virtual-hard-disk-containers <virtualHardDiskContainers>', $('Set the virtual-hard-disk-containers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk';
    var paramPath = options.path + '/' + 'caching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.caching) {
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'createOption';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.createOption) {
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = options.path + '/' + 'sourceImage';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImage) {
      if (options.parse && options.sourceImage) {
        options.sourceImage = JSON.parse(options.sourceImage);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImage}]);
    }
    paramPath = options.path + '/' + 'virtualHardDiskContainers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualHardDiskContainers) {
      if (options.parse && options.virtualHardDiskContainers) {
        options.virtualHardDiskContainers = JSON.parse(options.virtualHardDiskContainers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualHardDiskContainers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetOSDisk1 = catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetOSDisk1 = parametersCreateOrUpdateVirtualMachineScaleSetOSDisk1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetOSDisk1.command('os-disk')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--name', $('Remove the name value.'))
  .option('--operating-system-type', $('Remove the operating-system-type value.'))
  .option('--source-image', $('Remove the source-image value.'))
  .option('--virtual-hard-disk-containers', $('Remove the virtual-hard-disk-containers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk';
    var anySubItem = false || options.caching || options.createOption || options.name || options.operatingSystemType || options.sourceImage || options.virtualHardDiskContainers;
    if (anySubItem) {
      var subItemPath = null;
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.operatingSystemType) {
        subItemPath = options.path + '/operatingSystemType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceImage) {
        subItemPath = options.path + '/sourceImage';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualHardDiskContainers) {
        subItemPath = options.path + '/virtualHardDiskContainers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetOSDisk2 = catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetOSDisk2 = parametersCreateOrUpdateVirtualMachineScaleSetOSDisk2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetOSDisk2.command('os-disk')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetOSDisk2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--caching <caching>', $('Add the caching value.'))
  .option('--create-option <createOption>', $('Add the create-option value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--operating-system-type <operatingSystemType>', $('Add the operating-system-type value.'))
  .option('--source-image <sourceImage>', $('Add the source-image value.'))
  .option('--virtual-hard-disk-containers <virtualHardDiskContainers>', $('Add the virtual-hard-disk-containers value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + 'caching';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.caching) {
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + 'createOption';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.createOption) {
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + 'name';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + 'operatingSystemType';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.operatingSystemType) {
      if (options.parse && options.operatingSystemType) {
        options.operatingSystemType = JSON.parse(options.operatingSystemType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.operatingSystemType}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + 'sourceImage';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.sourceImage) {
      if (options.parse && options.sourceImage) {
        options.sourceImage = JSON.parse(options.sourceImage);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceImage}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/oSDisk' + '/' + 'virtualHardDiskContainers';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualHardDiskContainers) {
      if (options.parse && options.virtualHardDiskContainers) {
        options.virtualHardDiskContainers = JSON.parse(options.virtualHardDiskContainers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualHardDiskContainers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set source-image
  var catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSourceImage0 = catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetSourceImage0 = parametersCreateOrUpdateVirtualMachineScaleSetSourceImage0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetSourceImage0.command('source-image')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk/sourceImage';
    var paramPath = options.path + '/' + 'uri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.uri) {
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove source-image
  var catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSourceImage1 = catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetSourceImage1 = parametersCreateOrUpdateVirtualMachineScaleSetSourceImage1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetSourceImage1.command('source-image')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk/sourceImage';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add source-image
  var catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetSourceImage2 = catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetSourceImage2 = parametersCreateOrUpdateVirtualMachineScaleSetSourceImage2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetSourceImage2.command('source-image')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetSourceImage2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--uri <uri>', $('Add the uri value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk/sourceImage' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile/oSDisk/sourceImage' + '/' + 'uri';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.uri) {
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-hard-disk-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0.command('virtual-hard-disk-containers')
  .description($('Set catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk/virtualHardDiskContainers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-hard-disk-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1.command('virtual-hard-disk-containers')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk/virtualHardDiskContainers' + (options.index ? ('/' + options.index) : '');
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-hard-disk-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2 = catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2 = parametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2.command('virtual-hard-disk-containers')
  .description($('Remove catparametersCreateOrUpdateVirtualMachineScaleSetVirtualHardDiskContainers2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/oSDisk/virtualHardDiskContainers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineScaleSet Deallocate
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetDeallocate = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetDeallocate.command('deallocate')
  .description($('deallocate method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deallocate(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet DeallocateInstances
  --resource-group-name
  --vm-scale-set-name
  --vm-instance-ids
=============================================
{
  "instanceIDs":[
    ""
  ]
}
*/
  var virtualMachineScaleSetDeallocateInstances = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetDeallocateInstances.command('deallocate-instances')
  .description($('deallocate-instances method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--vm-instance-ids <vm-instance-ids>', $('vm-instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('vmInstanceIds = ' + options.vmInstanceIds);
    var vmInstanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      vmInstanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var vmInstanceIdsValArr = options.vmInstanceIds.split(',');
      cli.output.info('vmInstanceIdsValArr : ' + vmInstanceIdsValArr);
      vmInstanceIdsObj = {};
      vmInstanceIdsObj.instanceIDs = vmInstanceIdsValArr;
    }
    cli.output.info('vmInstanceIdsObj = ' + JSON.stringify(vmInstanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deallocateInstances(options.resourceGroupName, options.vmScaleSetName, vmInstanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet Delete
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetDelete = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetDelete.command('delete')
  .description($('delete method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deleteMethod(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet DeleteInstances
  --resource-group-name
  --vm-scale-set-name
  --vm-instance-ids
=============================================
{
  "instanceIDs":[
    ""
  ]
}
*/
  var virtualMachineScaleSetDeleteInstances = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetDeleteInstances.command('delete-instances')
  .description($('delete-instances method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--vm-instance-ids <vm-instance-ids>', $('vm-instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('vmInstanceIds = ' + options.vmInstanceIds);
    var vmInstanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      vmInstanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var vmInstanceIdsValArr = options.vmInstanceIds.split(',');
      cli.output.info('vmInstanceIdsValArr : ' + vmInstanceIdsValArr);
      vmInstanceIdsObj = {};
      vmInstanceIdsObj.instanceIDs = vmInstanceIdsValArr;
    }
    cli.output.info('vmInstanceIdsObj = ' + JSON.stringify(vmInstanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deleteInstances(options.resourceGroupName, options.vmScaleSetName, vmInstanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet Get
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetGet = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetGet.command('get')
  .description($('get method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.get(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet GetInstanceView
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetGetInstanceView = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetGetInstanceView.command('get-instance-view')
  .description($('get-instance-view method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.getInstanceView(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet List
  --resource-group-name
*/
  var virtualMachineScaleSetList = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetList.command('list')
  .description($('list method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.list(options.resourceGroupName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet ListAll
  --parameters
=============================================
{
}
*/
  var virtualMachineScaleSetListAll = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetListAll.command('list-all')
  .description($('list-all method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listAll(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineScaleSetListAlllistAllParameters0 = virtualMachineScaleSetListAll.category('parameters')
  .description($('Commands to manage parameter for your virtual machine scale set.'));
  var virtualMachineScaleSetListAlllistAllGenerate0 = virtualMachineScaleSetListAlllistAllParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine scale set.'));
  virtualMachineScaleSetListAlllistAllGenerate0.command('list-all')
  .description($('Generate virtualMachineScaleSetListAll parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{}', _);
    var filePath = 'virtualMachineScaleSetListAll_listAll.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineScaleSetListAlllistAllParameters0.command('patch')
  .description($('Command to patch virtualMachineScaleSetListAll parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove list-parameters
  var catparametersListAllVirtualMachineScaleSetListParameters1 = cli.category('vmss');
  var parametersListAllVirtualMachineScaleSetListParameters1 = catparametersListAllVirtualMachineScaleSetListParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set.'));
  var removeparametersListAllVirtualMachineScaleSetListParameters1 = parametersListAllVirtualMachineScaleSetListParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set.'));
  removeparametersListAllVirtualMachineScaleSetListParameters1.command('list-parameters')
  .description($('Remove catparametersListAllVirtualMachineScaleSetListParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add list-parameters
  var catparametersListAllVirtualMachineScaleSetListParameters2 = cli.category('vmss');
  var parametersListAllVirtualMachineScaleSetListParameters2 = catparametersListAllVirtualMachineScaleSetListParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set.'));
  var addparametersListAllVirtualMachineScaleSetListParameters2 = parametersListAllVirtualMachineScaleSetListParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set.'));
  addparametersListAllVirtualMachineScaleSetListParameters2.command('list-parameters')
  .description($('Remove catparametersListAllVirtualMachineScaleSetListParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineScaleSet ListNext
  --next-link
*/
  var virtualMachineScaleSetListNext = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetListNext.command('list-next')
  .description($('list-next method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--next-link <next-link>', $('next-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('nextLink = ' + options.nextLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listNext(options.nextLink, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet ListSkus
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetListSkus = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetListSkus.command('list-skus')
  .description($('list-skus method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listSkus(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet PowerOff
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetPowerOff = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetPowerOff.command('power-off')
  .description($('power-off method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.powerOff(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet PowerOffInstances
  --resource-group-name
  --vm-scale-set-name
  --vm-instance-ids
=============================================
{
  "instanceIDs":[
    ""
  ]
}
*/
  var virtualMachineScaleSetPowerOffInstances = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetPowerOffInstances.command('power-off-instances')
  .description($('power-off-instances method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--vm-instance-ids <vm-instance-ids>', $('vm-instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('vmInstanceIds = ' + options.vmInstanceIds);
    var vmInstanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      vmInstanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var vmInstanceIdsValArr = options.vmInstanceIds.split(',');
      cli.output.info('vmInstanceIdsValArr : ' + vmInstanceIdsValArr);
      vmInstanceIdsObj = {};
      vmInstanceIdsObj.instanceIDs = vmInstanceIdsValArr;
    }
    cli.output.info('vmInstanceIdsObj = ' + JSON.stringify(vmInstanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.powerOffInstances(options.resourceGroupName, options.vmScaleSetName, vmInstanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet Restart
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetRestart = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetRestart.command('restart')
  .description($('restart method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.restart(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet RestartInstances
  --resource-group-name
  --vm-scale-set-name
  --vm-instance-ids
=============================================
{
  "instanceIDs":[
    ""
  ]
}
*/
  var virtualMachineScaleSetRestartInstances = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetRestartInstances.command('restart-instances')
  .description($('restart-instances method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--vm-instance-ids <vm-instance-ids>', $('vm-instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('vmInstanceIds = ' + options.vmInstanceIds);
    var vmInstanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      vmInstanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var vmInstanceIdsValArr = options.vmInstanceIds.split(',');
      cli.output.info('vmInstanceIdsValArr : ' + vmInstanceIdsValArr);
      vmInstanceIdsObj = {};
      vmInstanceIdsObj.instanceIDs = vmInstanceIdsValArr;
    }
    cli.output.info('vmInstanceIdsObj = ' + JSON.stringify(vmInstanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.restartInstances(options.resourceGroupName, options.vmScaleSetName, vmInstanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet Start
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetStart = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetStart.command('start')
  .description($('start method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.start(options.resourceGroupName, options.vmScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet StartInstances
  --resource-group-name
  --vm-scale-set-name
  --vm-instance-ids
=============================================
{
  "instanceIDs":[
    ""
  ]
}
*/
  var virtualMachineScaleSetStartInstances = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetStartInstances.command('start-instances')
  .description($('start-instances method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--vm-instance-ids <vm-instance-ids>', $('vm-instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('vmInstanceIds = ' + options.vmInstanceIds);
    var vmInstanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      vmInstanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var vmInstanceIdsValArr = options.vmInstanceIds.split(',');
      cli.output.info('vmInstanceIdsValArr : ' + vmInstanceIdsValArr);
      vmInstanceIdsObj = {};
      vmInstanceIdsObj.instanceIDs = vmInstanceIdsValArr;
    }
    cli.output.info('vmInstanceIdsObj = ' + JSON.stringify(vmInstanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.startInstances(options.resourceGroupName, options.vmScaleSetName, vmInstanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSet UpdateInstances
  --resource-group-name
  --vm-scale-set-name
  --vm-instance-ids
=============================================
{
  "instanceIDs":[
    ""
  ]
}
*/
  var virtualMachineScaleSetUpdateInstances = cli.category('vmss').description($('Commands to manage your virtual machine scale set.'));
  virtualMachineScaleSetUpdateInstances.command('update-instances')
  .description($('update-instances method to manage your virtual machine scale set.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--vm-instance-ids <vm-instance-ids>', $('vm-instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('vmInstanceIds = ' + options.vmInstanceIds);
    var vmInstanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      vmInstanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var vmInstanceIdsValArr = options.vmInstanceIds.split(',');
      cli.output.info('vmInstanceIdsValArr : ' + vmInstanceIdsValArr);
      vmInstanceIdsObj = {};
      vmInstanceIdsObj.instanceIDs = vmInstanceIdsValArr;
    }
    cli.output.info('vmInstanceIdsObj = ' + JSON.stringify(vmInstanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.updateInstances(options.resourceGroupName, options.vmScaleSetName, vmInstanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM Deallocate
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMDeallocate = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMDeallocate.command('deallocate')
  .description($('deallocate method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.deallocate(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM Delete
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMDelete = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMDelete.command('delete')
  .description($('delete method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.deleteMethod(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM Get
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMGet = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMGet.command('get')
  .description($('get method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.get(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM GetInstanceView
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMGetInstanceView = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMGetInstanceView.command('get-instance-view')
  .description($('get-instance-view method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.getInstanceView(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM List
  --parameters
=============================================
{
  "expandExpression":"",
  "filterExpression":"",
  "resourceGroupName":"",
  "selectExpression":"",
  "virtualMachineScaleSetName":""
}
*/
  var virtualMachineScaleSetVMList = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMList.command('list')
  .description($('list method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--expand-expression <expand-expression>', $('expand-expression'))
  .option('--filter-expression <filter-expression>', $('filter-expression'))
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--select-expression <select-expression>', $('select-expression'))
  .option('--virtual-machine-scale-set-name <virtual-machine-scale-set-name>', $('virtual-machine-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.info('expandExpression = ' + options.expandExpression);
      parametersObj.expandExpression = options.expandExpression;
      cli.output.info('filterExpression = ' + options.filterExpression);
      parametersObj.filterExpression = options.filterExpression;
      cli.output.info('resourceGroupName = ' + options.resourceGroupName);
      parametersObj.resourceGroupName = options.resourceGroupName;
      cli.output.info('selectExpression = ' + options.selectExpression);
      parametersObj.selectExpression = options.selectExpression;
      cli.output.info('virtualMachineScaleSetName = ' + options.virtualMachineScaleSetName);
      parametersObj.virtualMachineScaleSetName = options.virtualMachineScaleSetName;
    }
    cli.output.info('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.list(parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineScaleSetVMListlistParameters0 = virtualMachineScaleSetVMList.category('parameters')
  .description($('Commands to manage parameter for your virtual machine scale set vm.'));
  var virtualMachineScaleSetVMListlistGenerate0 = virtualMachineScaleSetVMListlistParameters0.category('generate')
  .description($('Commands to generate parameter file for your virtual machine scale set vm.'));
  virtualMachineScaleSetVMListlistGenerate0.command('list')
  .description($('Generate virtualMachineScaleSetVMList parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.info('{\"expandExpression\":\"\",\"filterExpression\":\"\",\"resourceGroupName\":\"\",\"selectExpression\":\"\",\"virtualMachineScaleSetName\":\"\"}', _);
    var filePath = 'virtualMachineScaleSetVMList_list.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"expandExpression\":\"\",\r\n\"filterExpression\":\"\",\r\n\"resourceGroupName\":\"\",\r\n\"selectExpression\":\"\",\r\n\"virtualMachineScaleSetName\":\"\"\r\n}'));
    cli.output.info('=====================================');
    cli.output.info('Parameter file output to: ' + filePath);
    cli.output.info('=====================================');
  });

  virtualMachineScaleSetVMListlistParameters0.command('patch')
  .description($('Command to patch virtualMachineScaleSetVMList parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.info(options.parameterFile, _);
    cli.output.info(options.operation);
    cli.output.info(options.path);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters set virtual-machine-scale-set-vm-list-parameters
  var catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0 = cli.category('vmssvm');
  var parametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0 = catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0.category('parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-set-vm.'));
  var setparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0 = parametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0.category('set')
  .description($('Commands to set parameter file for your virtual-machine-scale-set-vm.'));
  setparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0.command('virtual-machine-scale-set-vm-list-parameters')
  .description($('Set catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters0 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--expand-expression <expandExpression>', $('Set the expand-expression value.'))
  .option('--filter-expression <filterExpression>', $('Set the filter-expression value.'))
  .option('--resource-group-name <resourceGroupName>', $('Set the resource-group-name value.'))
  .option('--select-expression <selectExpression>', $('Set the select-expression value.'))
  .option('--virtual-machine-scale-set-name <virtualMachineScaleSetName>', $('Set the virtual-machine-scale-set-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'expandExpression';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.expandExpression) {
      if (options.parse && options.expandExpression) {
        options.expandExpression = JSON.parse(options.expandExpression);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.expandExpression}]);
    }
    paramPath = options.path + '/' + 'filterExpression';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.filterExpression) {
      if (options.parse && options.filterExpression) {
        options.filterExpression = JSON.parse(options.filterExpression);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.filterExpression}]);
    }
    paramPath = options.path + '/' + 'resourceGroupName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceGroupName) {
      if (options.parse && options.resourceGroupName) {
        options.resourceGroupName = JSON.parse(options.resourceGroupName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGroupName}]);
    }
    paramPath = options.path + '/' + 'selectExpression';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.selectExpression) {
      if (options.parse && options.selectExpression) {
        options.selectExpression = JSON.parse(options.selectExpression);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.selectExpression}]);
    }
    paramPath = options.path + '/' + 'virtualMachineScaleSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualMachineScaleSetName) {
      if (options.parse && options.virtualMachineScaleSetName) {
        options.virtualMachineScaleSetName = JSON.parse(options.virtualMachineScaleSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineScaleSetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });

  //parameters remove virtual-machine-scale-set-vm-list-parameters
  var catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1 = cli.category('vmssvm');
  var parametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1 = catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1.category('parameters')
  .description($('Commands to remove parameter for your virtual-machine-scale-set-vm.'));
  var removeparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1 = parametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1.category('remove')
  .description($('Commands to remove values in the parameter file for your virtual-machine-scale-set-vm.'));
  removeparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1.command('virtual-machine-scale-set-vm-list-parameters')
  .description($('Remove catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters1 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--expand-expression', $('Remove the expand-expression value.'))
  .option('--filter-expression', $('Remove the filter-expression value.'))
  .option('--resource-group-name', $('Remove the resource-group-name value.'))
  .option('--select-expression', $('Remove the select-expression value.'))
  .option('--virtual-machine-scale-set-name', $('Remove the virtual-machine-scale-set-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.expandExpression || options.filterExpression || options.resourceGroupName || options.selectExpression || options.virtualMachineScaleSetName;
    if (anySubItem) {
      var subItemPath = null;
      if (options.expandExpression) {
        subItemPath = options.path + '/expandExpression';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.filterExpression) {
        subItemPath = options.path + '/filterExpression';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGroupName) {
        subItemPath = options.path + '/resourceGroupName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.selectExpression) {
        subItemPath = options.path + '/selectExpression';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachineScaleSetName) {
        subItemPath = options.path + '/virtualMachineScaleSetName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });
  //parameters add virtual-machine-scale-set-vm-list-parameters
  var catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2 = cli.category('vmssvm');
  var parametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2 = catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2.category('parameters')
  .description($('Commands to add parameter for your virtual-machine-scale-set-vm.'));
  var addparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2 = parametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2.category('add')
  .description($('Commands to add values in the parameter file for your virtual-machine-scale-set-vm.'));
  addparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2.command('virtual-machine-scale-set-vm-list-parameters')
  .description($('Remove catparametersListVirtualMachineScaleSetVMVirtualMachineScaleSetVMListParameters2 parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .option('--expand-expression <expandExpression>', $('Add the expand-expression value.'))
  .option('--filter-expression <filterExpression>', $('Add the filter-expression value.'))
  .option('--resource-group-name <resourceGroupName>', $('Add the resource-group-name value.'))
  .option('--select-expression <selectExpression>', $('Add the select-expression value.'))
  .option('--virtual-machine-scale-set-name <virtualMachineScaleSetName>', $('Add the virtual-machine-scale-set-name value.'))
  .execute(function(options, _) {
    cli.output.info(options, _);
    cli.output.info(options.parameterFile);
    cli.output.info(options.key);
    cli.output.info(options.value);
    cli.output.info(options.parse);
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.info(options.value);
    cli.output.info('=====================================');
    cli.output.info('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.info('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.info('JSON object:');
    cli.output.info(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.info('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'expandExpression';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.expandExpression) {
      if (options.parse && options.expandExpression) {
        options.expandExpression = JSON.parse(options.expandExpression);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.expandExpression}]);
    }
    paramPath = '' + '/' + 'filterExpression';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.filterExpression) {
      if (options.parse && options.filterExpression) {
        options.filterExpression = JSON.parse(options.filterExpression);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.filterExpression}]);
    }
    paramPath = '' + '/' + 'resourceGroupName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.resourceGroupName) {
      if (options.parse && options.resourceGroupName) {
        options.resourceGroupName = JSON.parse(options.resourceGroupName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGroupName}]);
    }
    paramPath = '' + '/' + 'selectExpression';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.selectExpression) {
      if (options.parse && options.selectExpression) {
        options.selectExpression = JSON.parse(options.selectExpression);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.selectExpression}]);
    }
    paramPath = '' + '/' + 'virtualMachineScaleSetName';
    cli.output.info('================================================');
    cli.output.info('JSON Parameters Path:' + paramPath);
    cli.output.info('================================================');
    if (options.virtualMachineScaleSetName) {
      if (options.parse && options.virtualMachineScaleSetName) {
        options.virtualMachineScaleSetName = JSON.parse(options.virtualMachineScaleSetName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineScaleSetName}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.info('=====================================');
    cli.output.info('JSON object (updated):');
    cli.output.info(JSON.stringify(parametersObj));
    cli.output.info('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.info('=====================================');
    cli.output.info('Parameter file updated at: ' + options.parameterFile);
    cli.output.info('=====================================');
  });


/*
  VirtualMachineScaleSetVM PowerOff
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMPowerOff = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMPowerOff.command('power-off')
  .description($('power-off method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.powerOff(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM Restart
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMRestart = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMRestart.command('restart')
  .description($('restart method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.restart(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVM Start
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMStart = cli.category('vmssvm').description($('Commands to manage your virtual machine scale set vm.'));
  virtualMachineScaleSetVMStart.command('start')
  .description($('start method to manage your virtual machine scale set vm.'))
  .usage('[options]')
  .option('--resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    cli.output.info('resourceGroupName = ' + options.resourceGroupName);
    cli.output.info('vmScaleSetName = ' + options.vmScaleSetName);
    cli.output.info('instanceId = ' + options.instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeResourceProviderClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.start(options.resourceGroupName, options.vmScaleSetName, options.instanceId, _);
    cli.output.json(result);
  });


};
