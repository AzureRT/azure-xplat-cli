/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

function beautify(jsonText) {
    var obj = JSON.parse(jsonText);
    return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {

/*
  VirtualMachineScaleSets CreateOrUpdate
  --resource-group-name
  --name
  --parameters
=============================================
{
  "sku":{
    "name":"",
    "tier":"",
    "capacity":null
  },
  "upgradePolicy":{
    "mode":""
  },
  "virtualMachineProfile":{
    "osProfile":{
      "computerNamePrefix":"",
      "adminUsername":"",
      "adminPassword":"",
      "customData":"",
      "windowsConfiguration":{
        "provisionVMAgent":null,
        "enableAutomaticUpdates":null,
        "timeZone":"",
        "additionalUnattendContent":[
          {
            "passName":"",
            "componentName":"",
            "settingName":"",
            "content":""
          }
        ],
        "winRM":{
          "listeners":[
            {
              "protocol":"",
              "certificateUrl":""
            }
          ]
        }
      },
      "linuxConfiguration":{
        "disablePasswordAuthentication":null,
        "ssh":{
          "publicKeys":[
            {
              "path":"",
              "keyData":""
            }
          ]
        }
      },
      "secrets":[
        {
          "sourceVault":{
            "id":""
          },
          "vaultCertificates":[
            {
              "certificateUrl":"",
              "certificateStore":""
            }
          ]
        }
      ]
    },
    "storageProfile":{
      "imageReference":{
        "publisher":"",
        "offer":"",
        "sku":"",
        "version":""
      },
      "osDisk":{
        "name":"",
        "caching":"",
        "createOption":"",
        "osType":"",
        "image":{
          "uri":""
        },
        "vhdContainers":[
          ""
        ]
      }
    },
    "networkProfile":{
      "networkInterfaceConfigurations":[
        {
          "name":"",
          "primary":null,
          "ipConfigurations":[
            {
              "name":"",
              "subnet":{
                "id":""
              },
              "loadBalancerBackendAddressPools":[
                {
                  "id":""
                }
              ],
              "id":""
            }
          ],
          "id":""
        }
      ]
    },
    "extensionProfile":{
      "extensions":[
        {
          "name":"",
          "publisher":"",
          "virtualMachineScaleSetExtensionType":"",
          "typeHandlerVersion":"",
          "autoUpgradeMinorVersion":null,
          "settings":{
          },
          "protectedSettings":{
          },
          "provisioningState":"",
          "id":""
        }
      ]
    }
  },
  "provisioningState":"",
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var virtualMachineScaleSetsCreateOrUpdate = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsCreateOrUpdate.command('create-or-update [resource-group-name] [name] [parameters]')
  .description($('Commands to manage your virtual machine scale sets by the create-or-update method.'))
  .usage('[options] <resource-group-name> <name> <parameters>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, name, parameters, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.createOrUpdate(resourceGroupName, name, parametersObj, _);
    cli.output.json(result);
  });
  var virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2 = virtualMachineScaleSetsCreateOrUpdate.category('create-or-update-parameters')
  .description($('Commands to generate parameter input file for your virtual machine scale sets.'));
  virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2.command('generate')
  .description($('Generate virtualMachineScaleSetsCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"sku\":{\"name\":\"\",\"tier\":\"\",\"capacity\":null},\"upgradePolicy\":{\"mode\":\"\"},\"virtualMachineProfile\":{\"osProfile\":{\"computerNamePrefix\":\"\",\"adminUsername\":\"\",\"adminPassword\":\"\",\"customData\":\"\",\"windowsConfiguration\":{\"provisionVMAgent\":null,\"enableAutomaticUpdates\":null,\"timeZone\":\"\",\"additionalUnattendContent\":[{\"passName\":\"\",\"componentName\":\"\",\"settingName\":\"\",\"content\":\"\"}],\"winRM\":{\"listeners\":[{\"protocol\":\"\",\"certificateUrl\":\"\"}]}},\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"ssh\":{\"publicKeys\":[{\"path\":\"\",\"keyData\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"id\":\"\"},\"vaultCertificates\":[{\"certificateUrl\":\"\",\"certificateStore\":\"\"}]}]},\"storageProfile\":{\"imageReference\":{\"publisher\":\"\",\"offer\":\"\",\"sku\":\"\",\"version\":\"\"},\"osDisk\":{\"name\":\"\",\"caching\":\"\",\"createOption\":\"\",\"osType\":\"\",\"image\":{\"uri\":\"\"},\"vhdContainers\":[\"\"]}},\"networkProfile\":{\"networkInterfaceConfigurations\":[{\"name\":\"\",\"primary\":null,\"ipConfigurations\":[{\"name\":\"\",\"subnet\":{\"id\":\"\"},\"loadBalancerBackendAddressPools\":[{\"id\":\"\"}],\"id\":\"\"}],\"id\":\"\"}]},\"extensionProfile\":{\"extensions\":[{\"name\":\"\",\"publisher\":\"\",\"virtualMachineScaleSetExtensionType\":\"\",\"typeHandlerVersion\":\"\",\"autoUpgradeMinorVersion\":null,\"settings\":{},\"protectedSettings\":{},\"provisioningState\":\"\",\"id\":\"\"}]}},\"provisioningState\":\"\",\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'virtualMachineScaleSetsCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"sku\":{\r\n\"name\":\"\",\r\n\"tier\":\"\",\r\n\"capacity\":null\r\n},\r\n\"upgradePolicy\":{\r\n\"mode\":\"\"\r\n},\r\n\"virtualMachineProfile\":{\r\n\"osProfile\":{\r\n\"computerNamePrefix\":\"\",\r\n\"adminUsername\":\"\",\r\n\"adminPassword\":\"\",\r\n\"customData\":\"\",\r\n\"windowsConfiguration\":{\r\n\"provisionVMAgent\":null,\r\n\"enableAutomaticUpdates\":null,\r\n\"timeZone\":\"\",\r\n\"additionalUnattendContent\":[\r\n{\r\n\"passName\":\"\",\r\n\"componentName\":\"\",\r\n\"settingName\":\"\",\r\n\"content\":\"\"\r\n}\r\n],\r\n\"winRM\":{\r\n\"listeners\":[\r\n{\r\n\"protocol\":\"\",\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"path\":\"\",\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"certificateStore\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"publisher\":\"\",\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\"\r\n},\r\n\"osDisk\":{\r\n\"name\":\"\",\r\n\"caching\":\"\",\r\n\"createOption\":\"\",\r\n\"osType\":\"\",\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"vhdContainers\":[\r\n\"\"\r\n]\r\n}\r\n},\r\n\"networkProfile\":{\r\n\"networkInterfaceConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"primary\":null,\r\n\"ipConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"subnet\":{\r\n\"id\":\"\"\r\n},\r\n\"loadBalancerBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"extensionProfile\":{\r\n\"extensions\":[\r\n{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"virtualMachineScaleSetExtensionType\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"autoUpgradeMinorVersion\":null,\r\n\"settings\":{\r\n},\r\n\"protectedSettings\":{\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch virtualMachineScaleSetsCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0.category('virtual-machine-scale-set')
  .description($('Commands to set/remove/add virtual-machine-scale-set of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0.command('set')
  .description($('Set virtual-machine-scale-set in create-or-update-parameters string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "upgradePolicy":{\r\n    "mode":""\r\n  },\r\n  "virtualMachineProfile":{\r\n    "osProfile":{\r\n      "computerNamePrefix":"",\r\n      "adminUsername":"",\r\n      "adminPassword":"",\r\n      "customData":"",\r\n      "windowsConfiguration":{\r\n        "provisionVMAgent":null,\r\n        "enableAutomaticUpdates":null,\r\n        "timeZone":"",\r\n        "additionalUnattendContent":[\r\n          {\r\n            "passName":"",\r\n            "componentName":"",\r\n            "settingName":"",\r\n            "content":""\r\n          }\r\n        ],\r\n        "winRM":{\r\n          "listeners":[\r\n            {\r\n              "protocol":"",\r\n              "certificateUrl":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "linuxConfiguration":{\r\n        "disablePasswordAuthentication":null,\r\n        "ssh":{\r\n          "publicKeys":[\r\n            {\r\n              "path":"",\r\n              "keyData":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "secrets":[\r\n        {\r\n          "sourceVault":{\r\n            "id":""\r\n          },\r\n          "vaultCertificates":[\r\n            {\r\n              "certificateUrl":"",\r\n              "certificateStore":""\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "storageProfile":{\r\n      "imageReference":{\r\n        "publisher":"",\r\n        "offer":"",\r\n        "sku":"",\r\n        "version":""\r\n      },\r\n      "osDisk":{\r\n        "name":"",\r\n        "caching":"",\r\n        "createOption":"",\r\n        "osType":"",\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "vhdContainers":[\r\n          ""\r\n        ]\r\n      }\r\n    },\r\n    "networkProfile":{\r\n      "networkInterfaceConfigurations":[\r\n        {\r\n          "name":"",\r\n          "primary":null,\r\n          "ipConfigurations":[\r\n            {\r\n              "name":"",\r\n              "subnet":{\r\n                "id":""\r\n              },\r\n              "loadBalancerBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "id":""\r\n            }\r\n          ],\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "extensionProfile":{\r\n      "extensions":[\r\n        {\r\n          "name":"",\r\n          "publisher":"",\r\n          "virtualMachineScaleSetExtensionType":"",\r\n          "typeHandlerVersion":"",\r\n          "autoUpgradeMinorVersion":null,\r\n          "settings":{\r\n          },\r\n          "protectedSettings":{\r\n          },\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--upgrade-policy <upgradePolicy>', $('Set the upgrade-policy value.'))
  .option('--virtual-machine-profile <virtualMachineProfile>', $('Set the virtual-machine-profile value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'upgradePolicy';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.upgradePolicy) {
      if (options.parse && options.upgradePolicy) {
        options.upgradePolicy = JSON.parse(options.upgradePolicy);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradePolicy}]);
    }
    paramPath = options.path + '/' + 'virtualMachineProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachineProfile) {
      if (options.parse && options.virtualMachineProfile) {
        options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineProfile}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1.category('virtual-machine-scale-set')
  .description($('Commands to set/remove/add virtual-machine-scale-set of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1.command('remove')
  .description($('Remove virtual-machine-scale-set in create-or-update-parameters string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "upgradePolicy":{\r\n    "mode":""\r\n  },\r\n  "virtualMachineProfile":{\r\n    "osProfile":{\r\n      "computerNamePrefix":"",\r\n      "adminUsername":"",\r\n      "adminPassword":"",\r\n      "customData":"",\r\n      "windowsConfiguration":{\r\n        "provisionVMAgent":null,\r\n        "enableAutomaticUpdates":null,\r\n        "timeZone":"",\r\n        "additionalUnattendContent":[\r\n          {\r\n            "passName":"",\r\n            "componentName":"",\r\n            "settingName":"",\r\n            "content":""\r\n          }\r\n        ],\r\n        "winRM":{\r\n          "listeners":[\r\n            {\r\n              "protocol":"",\r\n              "certificateUrl":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "linuxConfiguration":{\r\n        "disablePasswordAuthentication":null,\r\n        "ssh":{\r\n          "publicKeys":[\r\n            {\r\n              "path":"",\r\n              "keyData":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "secrets":[\r\n        {\r\n          "sourceVault":{\r\n            "id":""\r\n          },\r\n          "vaultCertificates":[\r\n            {\r\n              "certificateUrl":"",\r\n              "certificateStore":""\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "storageProfile":{\r\n      "imageReference":{\r\n        "publisher":"",\r\n        "offer":"",\r\n        "sku":"",\r\n        "version":""\r\n      },\r\n      "osDisk":{\r\n        "name":"",\r\n        "caching":"",\r\n        "createOption":"",\r\n        "osType":"",\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "vhdContainers":[\r\n          ""\r\n        ]\r\n      }\r\n    },\r\n    "networkProfile":{\r\n      "networkInterfaceConfigurations":[\r\n        {\r\n          "name":"",\r\n          "primary":null,\r\n          "ipConfigurations":[\r\n            {\r\n              "name":"",\r\n              "subnet":{\r\n                "id":""\r\n              },\r\n              "loadBalancerBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "id":""\r\n            }\r\n          ],\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "extensionProfile":{\r\n      "extensions":[\r\n        {\r\n          "name":"",\r\n          "publisher":"",\r\n          "virtualMachineScaleSetExtensionType":"",\r\n          "typeHandlerVersion":"",\r\n          "autoUpgradeMinorVersion":null,\r\n          "settings":{\r\n          },\r\n          "protectedSettings":{\r\n          },\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--upgrade-policy', $('Remove the upgrade-policy value.'))
  .option('--virtual-machine-profile', $('Remove the virtual-machine-profile value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.sku || options.upgradePolicy || options.virtualMachineProfile || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.upgradePolicy) {
        subItemPath = options.path + '/upgradePolicy';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachineProfile) {
        subItemPath = options.path + '/virtualMachineProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet2 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet2 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet2.category('virtual-machine-scale-set')
  .description($('Commands to set/remove/add virtual-machine-scale-set of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet2.command('add')
  .description($('Add virtual-machine-scale-set in create-or-update-parameters string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "upgradePolicy":{\r\n    "mode":""\r\n  },\r\n  "virtualMachineProfile":{\r\n    "osProfile":{\r\n      "computerNamePrefix":"",\r\n      "adminUsername":"",\r\n      "adminPassword":"",\r\n      "customData":"",\r\n      "windowsConfiguration":{\r\n        "provisionVMAgent":null,\r\n        "enableAutomaticUpdates":null,\r\n        "timeZone":"",\r\n        "additionalUnattendContent":[\r\n          {\r\n            "passName":"",\r\n            "componentName":"",\r\n            "settingName":"",\r\n            "content":""\r\n          }\r\n        ],\r\n        "winRM":{\r\n          "listeners":[\r\n            {\r\n              "protocol":"",\r\n              "certificateUrl":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "linuxConfiguration":{\r\n        "disablePasswordAuthentication":null,\r\n        "ssh":{\r\n          "publicKeys":[\r\n            {\r\n              "path":"",\r\n              "keyData":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "secrets":[\r\n        {\r\n          "sourceVault":{\r\n            "id":""\r\n          },\r\n          "vaultCertificates":[\r\n            {\r\n              "certificateUrl":"",\r\n              "certificateStore":""\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "storageProfile":{\r\n      "imageReference":{\r\n        "publisher":"",\r\n        "offer":"",\r\n        "sku":"",\r\n        "version":""\r\n      },\r\n      "osDisk":{\r\n        "name":"",\r\n        "caching":"",\r\n        "createOption":"",\r\n        "osType":"",\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "vhdContainers":[\r\n          ""\r\n        ]\r\n      }\r\n    },\r\n    "networkProfile":{\r\n      "networkInterfaceConfigurations":[\r\n        {\r\n          "name":"",\r\n          "primary":null,\r\n          "ipConfigurations":[\r\n            {\r\n              "name":"",\r\n              "subnet":{\r\n                "id":""\r\n              },\r\n              "loadBalancerBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "id":""\r\n            }\r\n          ],\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "extensionProfile":{\r\n      "extensions":[\r\n        {\r\n          "name":"",\r\n          "publisher":"",\r\n          "virtualMachineScaleSetExtensionType":"",\r\n          "typeHandlerVersion":"",\r\n          "autoUpgradeMinorVersion":null,\r\n          "settings":{\r\n          },\r\n          "protectedSettings":{\r\n          },\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--upgrade-policy <upgradePolicy>', $('Add the upgrade-policy value.'))
  .option('--virtual-machine-profile <virtualMachineProfile>', $('Add the virtual-machine-profile value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '' + '/' + 'upgradePolicy';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.upgradePolicy) {
      if (options.parse && options.upgradePolicy) {
        options.upgradePolicy = JSON.parse(options.upgradePolicy);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradePolicy}]);
    }
    paramPath = '' + '/' + 'virtualMachineProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachineProfile) {
      if (options.parse && options.virtualMachineProfile) {
        options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineProfile}]);
    }
    paramPath = '' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku0 = catparametersCreateOrUpdateVirtualMachineScaleSetsSku0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSku0 = parametersCreateOrUpdateVirtualMachineScaleSetsSku0.category('sku')
  .description($('Commands to set/remove/add sku of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSku0.command('set')
  .description($('Set sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sku';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
        options.capacity = JSON.parse(options.capacity);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSku1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsSku1 = parametersCreateOrUpdateVirtualMachineScaleSetsSku1.category('sku')
  .description($('Commands to set/remove/add sku of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsSku1.command('remove')
  .description($('Remove sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSku2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsSku2 = parametersCreateOrUpdateVirtualMachineScaleSetsSku2.category('sku')
  .description($('Commands to set/remove/add sku of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsSku2.command('add')
  .description($('Add sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--tier <tier>', $('Add the tier value.'))
  .option('--capacity <capacity>', $('Add the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/sku' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/sku' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/sku' + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = '/sku' + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
        options.capacity = JSON.parse(options.capacity);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0 = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0 = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0.category('upgrade-policy')
  .description($('Commands to set/remove/add upgrade-policy of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0.command('set')
  .description($('Set upgrade-policy in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "upgradePolicy" : {\r\n             "mode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/upgradePolicy';
    var paramPath = options.path + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1 = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1 = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1.category('upgrade-policy')
  .description($('Commands to set/remove/add upgrade-policy of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1.command('remove')
  .description($('Remove upgrade-policy in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "upgradePolicy" : {\r\n             "mode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/upgradePolicy';
    var anySubItem = false || options.mode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy2 = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy2 = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy2.category('upgrade-policy')
  .description($('Commands to set/remove/add upgrade-policy of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy2.command('add')
  .description($('Add upgrade-policy in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "upgradePolicy" : {\r\n             "mode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--mode <mode>', $('Add the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/upgradePolicy' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/upgradePolicy' + '/' + 'mode';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.mode) {
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0.category('virtual-machine-profile')
  .description($('Commands to set/remove/add virtual-machine-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0.command('set')
  .description($('Set virtual-machine-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachineProfile" : {\r\n             "osProfile":{\r\n               "computerNamePrefix":"",\r\n               "adminUsername":"",\r\n               "adminPassword":"",\r\n               "customData":"",\r\n               "windowsConfiguration":{\r\n                 "provisionVMAgent":null,\r\n                 "enableAutomaticUpdates":null,\r\n                 "timeZone":"",\r\n                 "additionalUnattendContent":[\r\n                   {\r\n                     "passName":"",\r\n                     "componentName":"",\r\n                     "settingName":"",\r\n                     "content":""\r\n                   }\r\n                 ],\r\n                 "winRM":{\r\n                   "listeners":[\r\n                     {\r\n                       "protocol":"",\r\n                       "certificateUrl":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "linuxConfiguration":{\r\n                 "disablePasswordAuthentication":null,\r\n                 "ssh":{\r\n                   "publicKeys":[\r\n                     {\r\n                       "path":"",\r\n                       "keyData":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "secrets":[\r\n                 {\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   },\r\n                   "vaultCertificates":[\r\n                     {\r\n                       "certificateUrl":"",\r\n                       "certificateStore":""\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "storageProfile":{\r\n               "imageReference":{\r\n                 "publisher":"",\r\n                 "offer":"",\r\n                 "sku":"",\r\n                 "version":""\r\n               },\r\n               "osDisk":{\r\n                 "name":"",\r\n                 "caching":"",\r\n                 "createOption":"",\r\n                 "osType":"",\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "vhdContainers":[\r\n                   ""\r\n                 ]\r\n               }\r\n             },\r\n             "networkProfile":{\r\n               "networkInterfaceConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "primary":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "subnet":{\r\n                         "id":""\r\n                       },\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "extensionProfile":{\r\n               "extensions":[\r\n                 {\r\n                   "name":"",\r\n                   "publisher":"",\r\n                   "virtualMachineScaleSetExtensionType":"",\r\n                   "typeHandlerVersion":"",\r\n                   "autoUpgradeMinorVersion":null,\r\n                   "settings":{\r\n                   },\r\n                   "protectedSettings":{\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--os-profile <osProfile>', $('Set the os-profile value.'))
  .option('--storage-profile <storageProfile>', $('Set the storage-profile value.'))
  .option('--network-profile <networkProfile>', $('Set the network-profile value.'))
  .option('--extension-profile <extensionProfile>', $('Set the extension-profile value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile';
    var paramPath = options.path + '/' + 'osProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.osProfile) {
      if (options.parse && options.osProfile) {
        options.osProfile = JSON.parse(options.osProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osProfile}]);
    }
    paramPath = options.path + '/' + 'storageProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storageProfile) {
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    paramPath = options.path + '/' + 'networkProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkProfile) {
      if (options.parse && options.networkProfile) {
        options.networkProfile = JSON.parse(options.networkProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkProfile}]);
    }
    paramPath = options.path + '/' + 'extensionProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionProfile) {
      if (options.parse && options.extensionProfile) {
        options.extensionProfile = JSON.parse(options.extensionProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionProfile}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1.category('virtual-machine-profile')
  .description($('Commands to set/remove/add virtual-machine-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1.command('remove')
  .description($('Remove virtual-machine-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachineProfile" : {\r\n             "osProfile":{\r\n               "computerNamePrefix":"",\r\n               "adminUsername":"",\r\n               "adminPassword":"",\r\n               "customData":"",\r\n               "windowsConfiguration":{\r\n                 "provisionVMAgent":null,\r\n                 "enableAutomaticUpdates":null,\r\n                 "timeZone":"",\r\n                 "additionalUnattendContent":[\r\n                   {\r\n                     "passName":"",\r\n                     "componentName":"",\r\n                     "settingName":"",\r\n                     "content":""\r\n                   }\r\n                 ],\r\n                 "winRM":{\r\n                   "listeners":[\r\n                     {\r\n                       "protocol":"",\r\n                       "certificateUrl":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "linuxConfiguration":{\r\n                 "disablePasswordAuthentication":null,\r\n                 "ssh":{\r\n                   "publicKeys":[\r\n                     {\r\n                       "path":"",\r\n                       "keyData":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "secrets":[\r\n                 {\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   },\r\n                   "vaultCertificates":[\r\n                     {\r\n                       "certificateUrl":"",\r\n                       "certificateStore":""\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "storageProfile":{\r\n               "imageReference":{\r\n                 "publisher":"",\r\n                 "offer":"",\r\n                 "sku":"",\r\n                 "version":""\r\n               },\r\n               "osDisk":{\r\n                 "name":"",\r\n                 "caching":"",\r\n                 "createOption":"",\r\n                 "osType":"",\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "vhdContainers":[\r\n                   ""\r\n                 ]\r\n               }\r\n             },\r\n             "networkProfile":{\r\n               "networkInterfaceConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "primary":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "subnet":{\r\n                         "id":""\r\n                       },\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "extensionProfile":{\r\n               "extensions":[\r\n                 {\r\n                   "name":"",\r\n                   "publisher":"",\r\n                   "virtualMachineScaleSetExtensionType":"",\r\n                   "typeHandlerVersion":"",\r\n                   "autoUpgradeMinorVersion":null,\r\n                   "settings":{\r\n                   },\r\n                   "protectedSettings":{\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--os-profile', $('Remove the os-profile value.'))
  .option('--storage-profile', $('Remove the storage-profile value.'))
  .option('--network-profile', $('Remove the network-profile value.'))
  .option('--extension-profile', $('Remove the extension-profile value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile';
    var anySubItem = false || options.osProfile || options.storageProfile || options.networkProfile || options.extensionProfile;
    if (anySubItem) {
      var subItemPath = null;
      if (options.osProfile) {
        subItemPath = options.path + '/osProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageProfile) {
        subItemPath = options.path + '/storageProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkProfile) {
        subItemPath = options.path + '/networkProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionProfile) {
        subItemPath = options.path + '/extensionProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile2.category('virtual-machine-profile')
  .description($('Commands to set/remove/add virtual-machine-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile2.command('add')
  .description($('Add virtual-machine-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachineProfile" : {\r\n             "osProfile":{\r\n               "computerNamePrefix":"",\r\n               "adminUsername":"",\r\n               "adminPassword":"",\r\n               "customData":"",\r\n               "windowsConfiguration":{\r\n                 "provisionVMAgent":null,\r\n                 "enableAutomaticUpdates":null,\r\n                 "timeZone":"",\r\n                 "additionalUnattendContent":[\r\n                   {\r\n                     "passName":"",\r\n                     "componentName":"",\r\n                     "settingName":"",\r\n                     "content":""\r\n                   }\r\n                 ],\r\n                 "winRM":{\r\n                   "listeners":[\r\n                     {\r\n                       "protocol":"",\r\n                       "certificateUrl":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "linuxConfiguration":{\r\n                 "disablePasswordAuthentication":null,\r\n                 "ssh":{\r\n                   "publicKeys":[\r\n                     {\r\n                       "path":"",\r\n                       "keyData":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "secrets":[\r\n                 {\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   },\r\n                   "vaultCertificates":[\r\n                     {\r\n                       "certificateUrl":"",\r\n                       "certificateStore":""\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "storageProfile":{\r\n               "imageReference":{\r\n                 "publisher":"",\r\n                 "offer":"",\r\n                 "sku":"",\r\n                 "version":""\r\n               },\r\n               "osDisk":{\r\n                 "name":"",\r\n                 "caching":"",\r\n                 "createOption":"",\r\n                 "osType":"",\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "vhdContainers":[\r\n                   ""\r\n                 ]\r\n               }\r\n             },\r\n             "networkProfile":{\r\n               "networkInterfaceConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "primary":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "subnet":{\r\n                         "id":""\r\n                       },\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "extensionProfile":{\r\n               "extensions":[\r\n                 {\r\n                   "name":"",\r\n                   "publisher":"",\r\n                   "virtualMachineScaleSetExtensionType":"",\r\n                   "typeHandlerVersion":"",\r\n                   "autoUpgradeMinorVersion":null,\r\n                   "settings":{\r\n                   },\r\n                   "protectedSettings":{\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--os-profile <osProfile>', $('Add the os-profile value.'))
  .option('--storage-profile <storageProfile>', $('Add the storage-profile value.'))
  .option('--network-profile <networkProfile>', $('Add the network-profile value.'))
  .option('--extension-profile <extensionProfile>', $('Add the extension-profile value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile' + '/' + 'osProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.osProfile) {
      if (options.parse && options.osProfile) {
        options.osProfile = JSON.parse(options.osProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osProfile}]);
    }
    paramPath = '/virtualMachineProfile' + '/' + 'storageProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.storageProfile) {
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    paramPath = '/virtualMachineProfile' + '/' + 'networkProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkProfile) {
      if (options.parse && options.networkProfile) {
        options.networkProfile = JSON.parse(options.networkProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkProfile}]);
    }
    paramPath = '/virtualMachineProfile' + '/' + 'extensionProfile';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensionProfile) {
      if (options.parse && options.extensionProfile) {
        options.extensionProfile = JSON.parse(options.extensionProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionProfile}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0.category('os-profile')
  .description($('Commands to set/remove/add os-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0.command('set')
  .description($('Set os-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerNamePrefix":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":"",\r\n                   "componentName":"",\r\n                   "settingName":"",\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":"",\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--computer-name-prefix <computerNamePrefix>', $('Set the computer-name-prefix value.'))
  .option('--admin-username <adminUsername>', $('Set the admin-username value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--windows-configuration <windowsConfiguration>', $('Set the windows-configuration value.'))
  .option('--linux-configuration <linuxConfiguration>', $('Set the linux-configuration value.'))
  .option('--secrets <secrets>', $('Set the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile';
    var paramPath = options.path + '/' + 'computerNamePrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerNamePrefix) {
      if (options.parse && options.computerNamePrefix) {
        options.computerNamePrefix = JSON.parse(options.computerNamePrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerNamePrefix}]);
    }
    paramPath = options.path + '/' + 'adminUsername';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUsername) {
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'windowsConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsConfiguration) {
      if (options.parse && options.windowsConfiguration) {
        options.windowsConfiguration = JSON.parse(options.windowsConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsConfiguration}]);
    }
    paramPath = options.path + '/' + 'linuxConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.linuxConfiguration) {
      if (options.parse && options.linuxConfiguration) {
        options.linuxConfiguration = JSON.parse(options.linuxConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxConfiguration}]);
    }
    paramPath = options.path + '/' + 'secrets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.secrets) {
      if (options.parse && options.secrets) {
        options.secrets = JSON.parse(options.secrets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secrets}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1.category('os-profile')
  .description($('Commands to set/remove/add os-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1.command('remove')
  .description($('Remove os-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerNamePrefix":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":"",\r\n                   "componentName":"",\r\n                   "settingName":"",\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":"",\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--computer-name-prefix', $('Remove the computer-name-prefix value.'))
  .option('--admin-username', $('Remove the admin-username value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--windows-configuration', $('Remove the windows-configuration value.'))
  .option('--linux-configuration', $('Remove the linux-configuration value.'))
  .option('--secrets', $('Remove the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile';
    var anySubItem = false || options.computerNamePrefix || options.adminUsername || options.adminPassword || options.customData || options.windowsConfiguration || options.linuxConfiguration || options.secrets;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computerNamePrefix) {
        subItemPath = options.path + '/computerNamePrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUsername) {
        subItemPath = options.path + '/adminUsername';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsConfiguration) {
        subItemPath = options.path + '/windowsConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.linuxConfiguration) {
        subItemPath = options.path + '/linuxConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secrets) {
        subItemPath = options.path + '/secrets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile2.category('os-profile')
  .description($('Commands to set/remove/add os-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile2.command('add')
  .description($('Add os-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerNamePrefix":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":"",\r\n                   "componentName":"",\r\n                   "settingName":"",\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":"",\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--computer-name-prefix <computerNamePrefix>', $('Add the computer-name-prefix value.'))
  .option('--admin-username <adminUsername>', $('Add the admin-username value.'))
  .option('--admin-password <adminPassword>', $('Add the admin-password value.'))
  .option('--custom-data <customData>', $('Add the custom-data value.'))
  .option('--windows-configuration <windowsConfiguration>', $('Add the windows-configuration value.'))
  .option('--linux-configuration <linuxConfiguration>', $('Add the linux-configuration value.'))
  .option('--secrets <secrets>', $('Add the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile' + '/' + 'computerNamePrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.computerNamePrefix) {
      if (options.parse && options.computerNamePrefix) {
        options.computerNamePrefix = JSON.parse(options.computerNamePrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerNamePrefix}]);
    }
    paramPath = '/virtualMachineProfile/osProfile' + '/' + 'adminUsername';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminUsername) {
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = '/virtualMachineProfile/osProfile' + '/' + 'adminPassword';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.adminPassword) {
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = '/virtualMachineProfile/osProfile' + '/' + 'customData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.customData) {
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = '/virtualMachineProfile/osProfile' + '/' + 'windowsConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.windowsConfiguration) {
      if (options.parse && options.windowsConfiguration) {
        options.windowsConfiguration = JSON.parse(options.windowsConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsConfiguration}]);
    }
    paramPath = '/virtualMachineProfile/osProfile' + '/' + 'linuxConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.linuxConfiguration) {
      if (options.parse && options.linuxConfiguration) {
        options.linuxConfiguration = JSON.parse(options.linuxConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxConfiguration}]);
    }
    paramPath = '/virtualMachineProfile/osProfile' + '/' + 'secrets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.secrets) {
      if (options.parse && options.secrets) {
        options.secrets = JSON.parse(options.secrets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secrets}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0 = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0 = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0.category('windows-configuration')
  .description($('Commands to set/remove/add windows-configuration of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0.command('set')
  .description($('Set windows-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":"",\r\n                 "componentName":"",\r\n                 "settingName":"",\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":"",\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--provision-vm-agent <provisionVMAgent>', $('Set the provision-vm-agent value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--win-rm <winRM>', $('Set the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration';
    var paramPath = options.path + '/' + 'provisionVMAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionVMAgent) {
      if (options.parse && options.provisionVMAgent) {
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      }
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionVMAgent}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'winRM';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.winRM) {
      if (options.parse && options.winRM) {
        options.winRM = JSON.parse(options.winRM);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.winRM}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1 = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1 = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1.category('windows-configuration')
  .description($('Commands to set/remove/add windows-configuration of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1.command('remove')
  .description($('Remove windows-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":"",\r\n                 "componentName":"",\r\n                 "settingName":"",\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":"",\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--provision-vm-agent', $('Remove the provision-vm-agent value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--win-rm', $('Remove the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration';
    var anySubItem = false || options.provisionVMAgent || options.enableAutomaticUpdates || options.timeZone || options.additionalUnattendContent || options.winRM;
    if (anySubItem) {
      var subItemPath = null;
      if (options.provisionVMAgent) {
        subItemPath = options.path + '/provisionVMAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.winRM) {
        subItemPath = options.path + '/winRM';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration2 = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration2 = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration2.category('windows-configuration')
  .description($('Commands to set/remove/add windows-configuration of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration2.command('add')
  .description($('Add windows-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":"",\r\n                 "componentName":"",\r\n                 "settingName":"",\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":"",\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--provision-vm-agent <provisionVMAgent>', $('Add the provision-vm-agent value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Add the enable-automatic-updates value.'))
  .option('--time-zone <timeZone>', $('Add the time-zone value.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Add the additional-unattend-content value.'))
  .option('--win-rm <winRM>', $('Add the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration' + '/' + 'provisionVMAgent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisionVMAgent) {
      if (options.parse && options.provisionVMAgent) {
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      }
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionVMAgent}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration' + '/' + 'enableAutomaticUpdates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableAutomaticUpdates) {
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration' + '/' + 'timeZone';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.timeZone) {
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration' + '/' + 'additionalUnattendContent';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.additionalUnattendContent) {
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration' + '/' + 'winRM';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.winRM) {
      if (options.parse && options.winRM) {
        options.winRM = JSON.parse(options.winRM);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.winRM}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0 = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0 = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0.category('additional-unattend-content')
  .description($('Commands to set/remove/add additional-unattend-content of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0.command('set')
  .description($('Set additional-unattend-content in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":"",\r\n             "componentName":"",\r\n             "settingName":"",\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .option('--content <content>', $('Set the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    paramPath = options.path + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1 = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1 = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1.category('additional-unattend-content')
  .description($('Commands to set/remove/add additional-unattend-content of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1.command('remove')
  .description($('Remove additional-unattend-content in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":"",\r\n             "componentName":"",\r\n             "settingName":"",\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .option('--content', $('Remove the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.componentName || options.settingName || options.content;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent2 = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent2 = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent2.category('additional-unattend-content')
  .description($('Commands to set/remove/add additional-unattend-content of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent2.command('add')
  .description($('Add additional-unattend-content in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":"",\r\n             "componentName":"",\r\n             "settingName":"",\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--pass-name <passName>', $('Add the pass-name value.'))
  .option('--component-name <componentName>', $('Add the component-name value.'))
  .option('--setting-name <settingName>', $('Add the setting-name value.'))
  .option('--content <content>', $('Add the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '') + '/' + 'passName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.passName) {
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '') + '/' + 'componentName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.componentName) {
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '') + '/' + 'settingName';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settingName) {
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '') + '/' + 'content';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.content) {
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set win-rm
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM0 = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0 = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM0.category('win-rm')
  .description($('Commands to set/remove/add win-rm of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0.command('set')
  .description($('Set win-rm in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":"",\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM';
    var paramPath = options.path + '/' + 'listeners';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove win-rm
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM1 = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1 = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM1.category('win-rm')
  .description($('Commands to set/remove/add win-rm of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1.command('remove')
  .description($('Remove win-rm in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":"",\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add win-rm
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM2 = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsWinRM2 = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM2.category('win-rm')
  .description($('Commands to set/remove/add win-rm of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsWinRM2.command('add')
  .description($('Add win-rm in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":"",\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--listeners <listeners>', $('Add the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM' + '/' + 'listeners';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.listeners) {
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners0 = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsListeners0 = parametersCreateOrUpdateVirtualMachineScaleSetsListeners0.category('listeners')
  .description($('Commands to set/remove/add listeners of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsListeners0.command('set')
  .description($('Set listeners in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":"",\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'certificateUrl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners1 = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsListeners1 = parametersCreateOrUpdateVirtualMachineScaleSetsListeners1.category('listeners')
  .description($('Commands to set/remove/add listeners of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsListeners1.command('remove')
  .description($('Remove listeners in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":"",\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.protocol || options.certificateUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners2 = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsListeners2 = parametersCreateOrUpdateVirtualMachineScaleSetsListeners2.category('listeners')
  .description($('Commands to set/remove/add listeners of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsListeners2.command('add')
  .description($('Add listeners in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":"",\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--certificate-url <certificateUrl>', $('Add the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateUrl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0 = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0 = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0.category('linux-configuration')
  .description($('Commands to set/remove/add linux-configuration of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0.command('set')
  .description($('Set linux-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--disable-password-authentication <disablePasswordAuthentication>', $('Set the disable-password-authentication value.'))
  .option('--ssh <ssh>', $('Set the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration';
    var paramPath = options.path + '/' + 'disablePasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disablePasswordAuthentication) {
      if (options.parse && options.disablePasswordAuthentication) {
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      }
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disablePasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'ssh';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ssh) {
      if (options.parse && options.ssh) {
        options.ssh = JSON.parse(options.ssh);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ssh}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1 = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1.category('linux-configuration')
  .description($('Commands to set/remove/add linux-configuration of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1.command('remove')
  .description($('Remove linux-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--disable-password-authentication', $('Remove the disable-password-authentication value.'))
  .option('--ssh', $('Remove the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration';
    var anySubItem = false || options.disablePasswordAuthentication || options.ssh;
    if (anySubItem) {
      var subItemPath = null;
      if (options.disablePasswordAuthentication) {
        subItemPath = options.path + '/disablePasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ssh) {
        subItemPath = options.path + '/ssh';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration2 = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration2 = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration2.category('linux-configuration')
  .description($('Commands to set/remove/add linux-configuration of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration2.command('add')
  .description($('Add linux-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--disable-password-authentication <disablePasswordAuthentication>', $('Add the disable-password-authentication value.'))
  .option('--ssh <ssh>', $('Add the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/linuxConfiguration' + '/' + 'disablePasswordAuthentication';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.disablePasswordAuthentication) {
      if (options.parse && options.disablePasswordAuthentication) {
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      }
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disablePasswordAuthentication}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/linuxConfiguration' + '/' + 'ssh';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ssh) {
      if (options.parse && options.ssh) {
        options.ssh = JSON.parse(options.ssh);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ssh}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ssh
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh0 = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSsh0 = parametersCreateOrUpdateVirtualMachineScaleSetsSsh0.category('ssh')
  .description($('Commands to set/remove/add ssh of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSsh0.command('set')
  .description($('Set ssh in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh';
    var paramPath = options.path + '/' + 'publicKeys';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ssh
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsSsh1 = parametersCreateOrUpdateVirtualMachineScaleSetsSsh1.category('ssh')
  .description($('Commands to set/remove/add ssh of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsSsh1.command('remove')
  .description($('Remove ssh in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh';
    var anySubItem = false || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ssh
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsSsh2 = parametersCreateOrUpdateVirtualMachineScaleSetsSsh2.category('ssh')
  .description($('Commands to set/remove/add ssh of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsSsh2.command('add')
  .description($('Add ssh in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--public-keys <publicKeys>', $('Add the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh' + '/' + 'publicKeys';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicKeys) {
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0.category('public-keys')
  .description($('Commands to set/remove/add public-keys of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0.command('set')
  .description($('Set public-keys in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--path <path>', $('Set the path value.'))
  .option('--key-data <keyData>', $('Set the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'keyData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyData) {
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1.category('public-keys')
  .description($('Commands to set/remove/add public-keys of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1.command('remove')
  .description($('Remove public-keys in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--path', $('Remove the path value.'))
  .option('--key-data', $('Remove the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.path || options.keyData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyData) {
        subItemPath = options.path + '/keyData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys2 = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys2 = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys2.category('public-keys')
  .description($('Commands to set/remove/add public-keys of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys2.command('add')
  .description($('Add public-keys in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--path <path>', $('Add the path value.'))
  .option('--key-data <keyData>', $('Add the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'path';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.path) {
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '') + '/' + 'keyData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyData) {
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets0 = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0 = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets0.category('secrets')
  .description($('Commands to set/remove/add secrets of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0.command('set')
  .description($('Set secrets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--vault-certificates <vaultCertificates>', $('Set the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceVault) {
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'vaultCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vaultCertificates) {
      if (options.parse && options.vaultCertificates) {
        options.vaultCertificates = JSON.parse(options.vaultCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vaultCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1 = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets1.category('secrets')
  .description($('Commands to set/remove/add secrets of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1.command('remove')
  .description($('Remove secrets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--vault-certificates', $('Remove the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.sourceVault || options.vaultCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vaultCertificates) {
        subItemPath = options.path + '/vaultCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsSecrets2 = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets2.category('secrets')
  .description($('Commands to set/remove/add secrets of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsSecrets2.command('add')
  .description($('Add secrets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--source-vault <sourceVault>', $('Add the source-vault value.'))
  .option('--vault-certificates <vaultCertificates>', $('Add the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceVault';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceVault) {
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '') + '/' + 'vaultCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vaultCertificates) {
      if (options.parse && options.vaultCertificates) {
        options.vaultCertificates = JSON.parse(options.vaultCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vaultCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0 = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0 = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0.category('source-vault')
  .description($('Commands to set/remove/add source-vault of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0.command('set')
  .description($('Set source-vault in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1 = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1.category('source-vault')
  .description($('Commands to set/remove/add source-vault of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1.command('remove')
  .description($('Remove source-vault in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault2 = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault2.category('source-vault')
  .description($('Commands to set/remove/add source-vault of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault2.command('add')
  .description($('Add source-vault in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/sourceVault' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/sourceVault' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0 = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0 = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0.category('vault-certificates')
  .description($('Commands to set/remove/add vault-certificates of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0.command('set')
  .description($('Set vault-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .option('--certificate-store <certificateStore>', $('Set the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateUrl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    paramPath = options.path + '/' + 'certificateStore';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateStore) {
      if (options.parse && options.certificateStore) {
        options.certificateStore = JSON.parse(options.certificateStore);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateStore}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1 = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1.category('vault-certificates')
  .description($('Commands to set/remove/add vault-certificates of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1.command('remove')
  .description($('Remove vault-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .option('--certificate-store', $('Remove the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateUrl || options.certificateStore;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateStore) {
        subItemPath = options.path + '/certificateStore';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates2 = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates2 = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates2.category('vault-certificates')
  .description($('Commands to set/remove/add vault-certificates of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates2.command('add')
  .description($('Add vault-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--certificate-url <certificateUrl>', $('Add the certificate-url value.'))
  .option('--certificate-store <certificateStore>', $('Add the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateUrl';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateUrl) {
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    paramPath = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'certificateStore';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.certificateStore) {
      if (options.parse && options.certificateStore) {
        options.certificateStore = JSON.parse(options.certificateStore);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateStore}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0.category('storage-profile')
  .description($('Commands to set/remove/add storage-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0.command('set')
  .description($('Set storage-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":""\r\n             },\r\n             "osDisk":{\r\n               "name":"",\r\n               "caching":"",\r\n               "createOption":"",\r\n               "osType":"",\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "vhdContainers":[\r\n                 ""\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--image-reference <imageReference>', $('Set the image-reference value.'))
  .option('--os-disk <osDisk>', $('Set the os-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile';
    var paramPath = options.path + '/' + 'imageReference';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageReference) {
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = options.path + '/' + 'osDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.osDisk) {
      if (options.parse && options.osDisk) {
        options.osDisk = JSON.parse(options.osDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1.category('storage-profile')
  .description($('Commands to set/remove/add storage-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1.command('remove')
  .description($('Remove storage-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":""\r\n             },\r\n             "osDisk":{\r\n               "name":"",\r\n               "caching":"",\r\n               "createOption":"",\r\n               "osType":"",\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "vhdContainers":[\r\n                 ""\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--image-reference', $('Remove the image-reference value.'))
  .option('--os-disk', $('Remove the os-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile';
    var anySubItem = false || options.imageReference || options.osDisk;
    if (anySubItem) {
      var subItemPath = null;
      if (options.imageReference) {
        subItemPath = options.path + '/imageReference';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osDisk) {
        subItemPath = options.path + '/osDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile2.category('storage-profile')
  .description($('Commands to set/remove/add storage-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile2.command('add')
  .description($('Add storage-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":""\r\n             },\r\n             "osDisk":{\r\n               "name":"",\r\n               "caching":"",\r\n               "createOption":"",\r\n               "osType":"",\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "vhdContainers":[\r\n                 ""\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--image-reference <imageReference>', $('Add the image-reference value.'))
  .option('--os-disk <osDisk>', $('Add the os-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile' + '/' + 'imageReference';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.imageReference) {
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile' + '/' + 'osDisk';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.osDisk) {
      if (options.parse && options.osDisk) {
        options.osDisk = JSON.parse(options.osDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference0 = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0 = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference0.category('image-reference')
  .description($('Commands to set/remove/add image-reference of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0.command('set')
  .description($('Set image-reference in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/imageReference';
    var paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'offer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference1 = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1 = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference1.category('image-reference')
  .description($('Commands to set/remove/add image-reference of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1.command('remove')
  .description($('Remove image-reference in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/imageReference';
    var anySubItem = false || options.publisher || options.offer || options.sku || options.version;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference2 = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsImageReference2 = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference2.category('image-reference')
  .description($('Commands to set/remove/add image-reference of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsImageReference2.command('add')
  .description($('Add image-reference in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--offer <offer>', $('Add the offer value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--version <version>', $('Add the version value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/imageReference' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'offer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.offer) {
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/imageReference' + '/' + 'version';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.version) {
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0 = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0.category('os-disk')
  .description($('Commands to set/remove/add os-disk of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0.command('set')
  .description($('Set os-disk in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "name":"",\r\n             "caching":"",\r\n             "createOption":"",\r\n             "osType":"",\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "vhdContainers":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--os-type <osType>', $('Set the os-type value.'))
  .option('--image <image>', $('Set the image value.'))
  .option('--vhd-containers <vhdContainers>', $('Set the vhd-containers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'caching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.caching) {
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'createOption';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.createOption) {
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'osType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.osType) {
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = options.path + '/' + 'image';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.image) {
      if (options.parse && options.image) {
        options.image = JSON.parse(options.image);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.image}]);
    }
    paramPath = options.path + '/' + 'vhdContainers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vhdContainers) {
      if (options.parse && options.vhdContainers) {
        options.vhdContainers = JSON.parse(options.vhdContainers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vhdContainers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1 = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1.category('os-disk')
  .description($('Commands to set/remove/add os-disk of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1.command('remove')
  .description($('Remove os-disk in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "name":"",\r\n             "caching":"",\r\n             "createOption":"",\r\n             "osType":"",\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "vhdContainers":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--os-type', $('Remove the os-type value.'))
  .option('--image', $('Remove the image value.'))
  .option('--vhd-containers', $('Remove the vhd-containers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk';
    var anySubItem = false || options.name || options.caching || options.createOption || options.osType || options.image || options.vhdContainers;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osType) {
        subItemPath = options.path + '/osType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.image) {
        subItemPath = options.path + '/image';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vhdContainers) {
        subItemPath = options.path + '/vhdContainers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk2 = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk2 = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk2.category('os-disk')
  .description($('Commands to set/remove/add os-disk of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk2.command('add')
  .description($('Add os-disk in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "name":"",\r\n             "caching":"",\r\n             "createOption":"",\r\n             "osType":"",\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "vhdContainers":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--caching <caching>', $('Add the caching value.'))
  .option('--create-option <createOption>', $('Add the create-option value.'))
  .option('--os-type <osType>', $('Add the os-type value.'))
  .option('--image <image>', $('Add the image value.'))
  .option('--vhd-containers <vhdContainers>', $('Add the vhd-containers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/osDisk' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile/osDisk' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/osDisk' + '/' + 'caching';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.caching) {
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/osDisk' + '/' + 'createOption';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.createOption) {
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/osDisk' + '/' + 'osType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.osType) {
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/osDisk' + '/' + 'image';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.image) {
      if (options.parse && options.image) {
        options.image = JSON.parse(options.image);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.image}]);
    }
    paramPath = '/virtualMachineProfile/storageProfile/osDisk' + '/' + 'vhdContainers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vhdContainers) {
      if (options.parse && options.vhdContainers) {
        options.vhdContainers = JSON.parse(options.vhdContainers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vhdContainers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set image
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage0 = catparametersCreateOrUpdateVirtualMachineScaleSetsImage0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsImage0 = parametersCreateOrUpdateVirtualMachineScaleSetsImage0.category('image')
  .description($('Commands to set/remove/add image of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsImage0.command('set')
  .description($('Set image in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/image';
    var paramPath = options.path + '/' + 'uri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.uri) {
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove image
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage1 = catparametersCreateOrUpdateVirtualMachineScaleSetsImage1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsImage1 = parametersCreateOrUpdateVirtualMachineScaleSetsImage1.category('image')
  .description($('Commands to set/remove/add image of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsImage1.command('remove')
  .description($('Remove image in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/image';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add image
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage2 = catparametersCreateOrUpdateVirtualMachineScaleSetsImage2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsImage2 = parametersCreateOrUpdateVirtualMachineScaleSetsImage2.category('image')
  .description($('Commands to set/remove/add image of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsImage2.command('add')
  .description($('Add image in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--uri <uri>', $('Add the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/image' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/storageProfile/osDisk/image' + '/' + 'uri';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.uri) {
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vhd-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0 = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0 = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0.category('vhd-containers')
  .description($('Commands to set/remove/add vhd-containers of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0.command('set')
  .description($('Set vhd-containers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vhdContainers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/vhdContainers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vhd-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1 = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1.category('vhd-containers')
  .description($('Commands to set/remove/add vhd-containers of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1.command('remove')
  .description($('Remove vhd-containers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vhdContainers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/vhdContainers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vhd-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers2 = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers2 = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers2.category('vhd-containers')
  .description($('Commands to set/remove/add vhd-containers of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers2.command('add')
  .description($('Add vhd-containers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vhdContainers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/vhdContainers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0.category('network-profile')
  .description($('Commands to set/remove/add network-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0.command('set')
  .description($('Set network-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaceConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "primary":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "subnet":{\r\n                       "id":""\r\n                     },\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--network-interface-configurations <networkInterfaceConfigurations>', $('Set the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile';
    var paramPath = options.path + '/' + 'networkInterfaceConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaceConfigurations) {
      if (options.parse && options.networkInterfaceConfigurations) {
        options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1.category('network-profile')
  .description($('Commands to set/remove/add network-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1.command('remove')
  .description($('Remove network-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaceConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "primary":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "subnet":{\r\n                       "id":""\r\n                     },\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interface-configurations', $('Remove the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile';
    var anySubItem = false || options.networkInterfaceConfigurations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.networkInterfaceConfigurations) {
        subItemPath = options.path + '/networkInterfaceConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile2.category('network-profile')
  .description($('Commands to set/remove/add network-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile2.command('add')
  .description($('Add network-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaceConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "primary":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "subnet":{\r\n                       "id":""\r\n                     },\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--network-interface-configurations <networkInterfaceConfigurations>', $('Add the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile' + '/' + 'networkInterfaceConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaceConfigurations) {
      if (options.parse && options.networkInterfaceConfigurations) {
        options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0.category('network-interface-configurations')
  .description($('Commands to set/remove/add network-interface-configurations of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0.command('set')
  .description($('Set network-interface-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaceConfigurations" : {\r\n             "name":"",\r\n             "primary":null,\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--primary <primary>', $('Set the primary value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'primary';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
        options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1.category('network-interface-configurations')
  .description($('Commands to set/remove/add network-interface-configurations of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1.command('remove')
  .description($('Remove network-interface-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaceConfigurations" : {\r\n             "name":"",\r\n             "primary":null,\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--primary', $('Remove the primary value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.primary || options.ipConfigurations || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.primary) {
        subItemPath = options.path + '/primary';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations2 = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations2 = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations2.category('network-interface-configurations')
  .description($('Commands to set/remove/add network-interface-configurations of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations2.command('add')
  .description($('Add network-interface-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaceConfigurations" : {\r\n             "name":"",\r\n             "primary":null,\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--primary <primary>', $('Add the primary value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'primary';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
        options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0 = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0 = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Set the load-balancer-backend-address-pools value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'loadBalancerBackendAddressPools';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1 = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1 = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--load-balancer-backend-address-pools', $('Remove the load-balancer-backend-address-pools value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.subnet || options.loadBalancerBackendAddressPools || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerBackendAddressPools) {
        subItemPath = options.path + '/loadBalancerBackendAddressPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations2 = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations2 = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Add the load-balancer-backend-address-pools value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerBackendAddressPools';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet0 = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0 = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet1 = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1 = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet2 = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsSubnet2 = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0.command('set')
  .description($('Set load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1.command('remove')
  .description($('Remove load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools2 = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools2 = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools2.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools2.command('add')
  .description($('Add load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0.category('extension-profile')
  .description($('Commands to set/remove/add extension-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0.command('set')
  .description($('Set extension-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionProfile" : {\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "virtualMachineScaleSetExtensionType":"",\r\n                 "typeHandlerVersion":"",\r\n                 "autoUpgradeMinorVersion":null,\r\n                 "settings":{\r\n                 },\r\n                 "protectedSettings":{\r\n                 },\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/extensionProfile';
    var paramPath = options.path + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1.category('extension-profile')
  .description($('Commands to set/remove/add extension-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1.command('remove')
  .description($('Remove extension-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionProfile" : {\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "virtualMachineScaleSetExtensionType":"",\r\n                 "typeHandlerVersion":"",\r\n                 "autoUpgradeMinorVersion":null,\r\n                 "settings":{\r\n                 },\r\n                 "protectedSettings":{\r\n                 },\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--extensions', $('Remove the extensions value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/extensionProfile';
    var anySubItem = false || options.extensions;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile2 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile2 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile2.category('extension-profile')
  .description($('Commands to set/remove/add extension-profile of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile2.command('add')
  .description($('Add extension-profile in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionProfile" : {\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "virtualMachineScaleSetExtensionType":"",\r\n                 "typeHandlerVersion":"",\r\n                 "autoUpgradeMinorVersion":null,\r\n                 "settings":{\r\n                 },\r\n                 "protectedSettings":{\r\n                 },\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--extensions <extensions>', $('Add the extensions value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/extensionProfile' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/extensionProfile' + '/' + 'extensions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.extensions) {
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions0 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions0.category('extensions')
  .description($('Commands to set/remove/add extensions of virtual-machine-scale-sets in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0.command('set')
  .description($('Set extensions in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "virtualMachineScaleSetExtensionType":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--virtual-machine-scale-set-extension-type <virtualMachineScaleSetExtensionType>', $('Set the virtual-machine-scale-set-extension-type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--auto-upgrade-minor-version <autoUpgradeMinorVersion>', $('Set the auto-upgrade-minor-version value.'))
  .option('--settings <settings>', $('Set the settings value.'))
  .option('--protected-settings <protectedSettings>', $('Set the protected-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'virtualMachineScaleSetExtensionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachineScaleSetExtensionType) {
      if (options.parse && options.virtualMachineScaleSetExtensionType) {
        options.virtualMachineScaleSetExtensionType = JSON.parse(options.virtualMachineScaleSetExtensionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineScaleSetExtensionType}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.typeHandlerVersion) {
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'autoUpgradeMinorVersion';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.autoUpgradeMinorVersion) {
      if (options.parse && options.autoUpgradeMinorVersion) {
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      }
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion}]);
    }
    paramPath = options.path + '/' + 'settings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settings) {
      if (options.parse && options.settings) {
        options.settings = JSON.parse(options.settings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settings}]);
    }
    paramPath = options.path + '/' + 'protectedSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protectedSettings) {
      if (options.parse && options.protectedSettings) {
        options.protectedSettings = JSON.parse(options.protectedSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protectedSettings}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions1 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-machine-scale-sets.'));
  var removeparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions1.category('extensions')
  .description($('Commands to set/remove/add extensions of virtual-machine-scale-sets in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1.command('remove')
  .description($('Remove extensions in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "virtualMachineScaleSetExtensionType":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--virtual-machine-scale-set-extension-type', $('Remove the virtual-machine-scale-set-extension-type value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--auto-upgrade-minor-version', $('Remove the auto-upgrade-minor-version value.'))
  .option('--settings', $('Remove the settings value.'))
  .option('--protected-settings', $('Remove the protected-settings value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.publisher || options.virtualMachineScaleSetExtensionType || options.typeHandlerVersion || options.autoUpgradeMinorVersion || options.settings || options.protectedSettings || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachineScaleSetExtensionType) {
        subItemPath = options.path + '/virtualMachineScaleSetExtensionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.autoUpgradeMinorVersion) {
        subItemPath = options.path + '/autoUpgradeMinorVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settings) {
        subItemPath = options.path + '/settings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protectedSettings) {
        subItemPath = options.path + '/protectedSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions2 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions2 = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-machine-scale-sets.'));
  var addparametersCreateOrUpdateVirtualMachineScaleSetsExtensions2 = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions2.category('extensions')
  .description($('Commands to set/remove/add extensions of virtual-machine-scale-sets in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualMachineScaleSetsExtensions2.command('add')
  .description($('Add extensions in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "virtualMachineScaleSetExtensionType":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--publisher <publisher>', $('Add the publisher value.'))
  .option('--virtual-machine-scale-set-extension-type <virtualMachineScaleSetExtensionType>', $('Add the virtual-machine-scale-set-extension-type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Add the type-handler-version value.'))
  .option('--auto-upgrade-minor-version <autoUpgradeMinorVersion>', $('Add the auto-upgrade-minor-version value.'))
  .option('--settings <settings>', $('Add the settings value.'))
  .option('--protected-settings <protectedSettings>', $('Add the protected-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'publisher';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publisher) {
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualMachineScaleSetExtensionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachineScaleSetExtensionType) {
      if (options.parse && options.virtualMachineScaleSetExtensionType) {
        options.virtualMachineScaleSetExtensionType = JSON.parse(options.virtualMachineScaleSetExtensionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineScaleSetExtensionType}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'typeHandlerVersion';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.typeHandlerVersion) {
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'autoUpgradeMinorVersion';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.autoUpgradeMinorVersion) {
      if (options.parse && options.autoUpgradeMinorVersion) {
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      }
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'settings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.settings) {
      if (options.parse && options.settings) {
        options.settings = JSON.parse(options.settings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settings}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'protectedSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protectedSettings) {
      if (options.parse && options.protectedSettings) {
        options.protectedSettings = JSON.parse(options.protectedSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protectedSettings}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualMachineScaleSets Deallocate
  --resource-group-name
  --vm-scale-set-name
  --instance-ids
*/
  var virtualMachineScaleSetsDeallocate = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsDeallocate.command('deallocate [resource-group-name] [vm-scale-set-name] [instance-ids]')
  .description($('Commands to manage your virtual machine scale sets by the deallocate method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-ids>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceIds, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds.split(',');
      cli.output.verbose('instanceIdsValArr : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deallocate(resourceGroupName, vMScaleSetName, instanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets Delete
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetsDelete = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsDelete.command('delete [resource-group-name] [vm-scale-set-name]')
  .description($('Commands to manage your virtual machine scale sets by the delete method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deleteMethod(resourceGroupName, vMScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets DeleteInstances
  --resource-group-name
  --vm-scale-set-name
  --instance-ids
*/
  var virtualMachineScaleSetsDeleteInstances = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsDeleteInstances.command('delete-instances [resource-group-name] [vm-scale-set-name] [instance-ids]')
  .description($('Commands to manage your virtual machine scale sets by the delete-instances method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-ids>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceIds, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds.split(',');
      cli.output.verbose('instanceIdsValArr : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deleteInstances(resourceGroupName, vMScaleSetName, instanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets Get
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetsGet = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsGet.command('get [resource-group-name] [vm-scale-set-name]')
  .description($('Commands to manage your virtual machine scale sets by the get method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.get(resourceGroupName, vMScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets GetInstanceView
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetsGetInstanceView = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsGetInstanceView.command('get-instance-view [resource-group-name] [vm-scale-set-name]')
  .description($('Commands to manage your virtual machine scale sets by the get-instance-view method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.getInstanceView(resourceGroupName, vMScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets List
  --resource-group-name
*/
  var virtualMachineScaleSetsList = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsList.command('list [resource-group-name]')
  .description($('Commands to manage your virtual machine scale sets by the list method.'))
  .usage('[options] <resource-group-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.list(resourceGroupName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets ListAll
*/
  var virtualMachineScaleSetsListAll = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsListAll.command('list-all')
  .description($('Commands to manage your virtual machine scale sets by the list-all method.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listAll(_);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets ListAllNext
  --next-page-link
*/
  var virtualMachineScaleSetsListAllNext = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsListAllNext.command('list-all-next [next-page-link]')
  .description($('Commands to manage your virtual machine scale sets by the list-all-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listAllNext(nextPageLink, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets ListNext
  --next-page-link
*/
  var virtualMachineScaleSetsListNext = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsListNext.command('list-next [next-page-link]')
  .description($('Commands to manage your virtual machine scale sets by the list-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listNext(nextPageLink, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets ListSkus
  --resource-group-name
  --vm-scale-set-name
*/
  var virtualMachineScaleSetsListSkus = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsListSkus.command('list-skus [resource-group-name] [vm-scale-set-name]')
  .description($('Commands to manage your virtual machine scale sets by the list-skus method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listSkus(resourceGroupName, vMScaleSetName, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets ListSkusNext
  --next-page-link
*/
  var virtualMachineScaleSetsListSkusNext = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsListSkusNext.command('list-skus-next [next-page-link]')
  .description($('Commands to manage your virtual machine scale sets by the list-skus-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listSkusNext(nextPageLink, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets PowerOff
  --resource-group-name
  --vm-scale-set-name
  --instance-ids
*/
  var virtualMachineScaleSetsPowerOff = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsPowerOff.command('power-off [resource-group-name] [vm-scale-set-name] [instance-ids]')
  .description($('Commands to manage your virtual machine scale sets by the power-off method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-ids>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceIds, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds.split(',');
      cli.output.verbose('instanceIdsValArr : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.powerOff(resourceGroupName, vMScaleSetName, instanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets Restart
  --resource-group-name
  --vm-scale-set-name
  --instance-ids
*/
  var virtualMachineScaleSetsRestart = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsRestart.command('restart [resource-group-name] [vm-scale-set-name] [instance-ids]')
  .description($('Commands to manage your virtual machine scale sets by the restart method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-ids>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceIds, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds.split(',');
      cli.output.verbose('instanceIdsValArr : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.restart(resourceGroupName, vMScaleSetName, instanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets Start
  --resource-group-name
  --vm-scale-set-name
  --instance-ids
*/
  var virtualMachineScaleSetsStart = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsStart.command('start [resource-group-name] [vm-scale-set-name] [instance-ids]')
  .description($('Commands to manage your virtual machine scale sets by the start method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-ids>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceIds, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds.split(',');
      cli.output.verbose('instanceIdsValArr : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.start(resourceGroupName, vMScaleSetName, instanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSets UpdateInstances
  --resource-group-name
  --vm-scale-set-name
  --instance-ids
*/
  var virtualMachineScaleSetsUpdateInstances = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsUpdateInstances.command('update-instances [resource-group-name] [vm-scale-set-name] [instance-ids]')
  .description($('Commands to manage your virtual machine scale sets by the update-instances method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-ids>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceIds, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds.split(',');
      cli.output.verbose('instanceIdsValArr : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.updateInstances(resourceGroupName, vMScaleSetName, instanceIdsObj, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs Deallocate
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsDeallocate = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsDeallocate.command('deallocate [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the deallocate method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.deallocate(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs Delete
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsDelete = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsDelete.command('delete [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the delete method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.deleteMethod(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs Get
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsGet = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsGet.command('get [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the get method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.get(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs GetInstanceView
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsGetInstanceView = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsGetInstanceView.command('get-instance-view [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the get-instance-view method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.getInstanceView(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs List
  --resource-group-name
  --virtual-machine-scale-set-name
  --odata-query
  --select
*/
  var virtualMachineScaleSetVMsList = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsList.command('list [resource-group-name] [virtual-machine-scale-set-name] [odata-query] [select]')
  .description($('Commands to manage your virtual machine scale set vm by the list method.'))
  .usage('[options] <resource-group-name> <virtual-machine-scale-set-name> <odata-query> <select>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --virtual-machine-scale-set-name <virtual-machine-scale-set-name>', $('virtual-machine-scale-set-name'))
  .option('--odata-query <odata-query>', $('odata-query'))
  .option('--select <select>', $('select'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualMachineScaleSetName, odataQuery, select, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualMachineScaleSetName = ' + virtualMachineScaleSetName);
    cli.output.verbose('odataQuery = ' + odataQuery);
    cli.output.verbose('select = ' + select);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.list(resourceGroupName, virtualMachineScaleSetName, odataQuery, select, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs ListNext
  --next-page-link
*/
  var virtualMachineScaleSetVMsListNext = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsListNext.command('list-next [next-page-link]')
  .description($('Commands to manage your virtual machine scale set vm by the list-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.listNext(nextPageLink, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs PowerOff
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsPowerOff = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsPowerOff.command('power-off [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the power-off method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.powerOff(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs Restart
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsRestart = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsRestart.command('restart [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the restart method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.restart(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });
/*
  VirtualMachineScaleSetVMs Start
  --resource-group-name
  --vm-scale-set-name
  --instance-id
*/
  var virtualMachineScaleSetVMsStart = cli.category('vmssvm')
  .description($('Commands to manage your virtual machine scale set vm.  '));
  virtualMachineScaleSetVMsStart.command('start [resource-group-name] [vm-scale-set-name] [instance-id]')
  .description($('Commands to manage your virtual machine scale set vm by the start method.'))
  .usage('[options] <resource-group-name> <vm-scale-set-name> <instance-id>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('-n, --vm-scale-set-name <vm-scale-set-name>', $('vm-scale-set-name'))
  .option('-d, --instance-id <instance-id>', $('instance-id'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, vMScaleSetName, instanceId, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('vMScaleSetName = ' + vMScaleSetName);
    cli.output.verbose('instanceId = ' + instanceId);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSetVMs.start(resourceGroupName, vMScaleSetName, instanceId, _);
    cli.output.json(result);
  });


};
